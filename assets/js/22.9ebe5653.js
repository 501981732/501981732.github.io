(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{245:function(e,t,r){"use strict";r.r(t);var n=r(0),s=Object(n.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),r("p",[e._v("源码一共300多行，由于篇幅(我比较懒)原因，我们只看webworker部分")]),e._v(" "),e._m(4),r("p",[e._v("wtf??居然还有这种操作，我们知道我们通常创建webworker是通过创建额外的js文件才能运行的")]),e._v(" "),e._m(5),r("p",[e._v("但是源码这里面，用了多次转换，从而达到动态创建webworker，然后我打开了"),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN"),r("OutboundLink")],1),e._v(",\n我们来分析下这里的操作。")]),e._v(" "),e._m(6),e._v(" "),r("p",[e._v("interseting!")]),e._v(" "),e._m(7),e._v(" "),r("p",[r("a",{attrs:{href:"https://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string",target:"_blank",rel:"noopener noreferrer"}},[e._v("stackoverflow how-to-create-a-web-worker-from-a-string"),r("OutboundLink")],1),e._v("中也有相关回答，\n"),r("a",{attrs:{href:"https://github.com/webpack-contrib/worker-loader/blob/master/src/workers/InlineWorker.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("worker-loader中也是这么操作的"),r("OutboundLink")],1)]),e._v(" "),e._m(8),e._v(" "),e._m(9),r("p",[e._v("useage")]),e._v(" "),e._m(10),r("p",[r("a",{attrs:{href:"https://ucren.com/blog/archives/453",target:"_blank",rel:"noopener noreferrer"}},[e._v("将 WebWorker 改造成无外链文件模式"),r("OutboundLink")],1)])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("前几天又看img-2 一个webcomponents的源码，感觉很有意思，除了用的最新的 "),t("code",[this._v("IntersectionObserver")]),this._v("做延时加载外，还提供了webworker Pre-cache图片的功能,出于好奇我查看了他的源码，发现了webworker的黑魔法！！学到就是赚到。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"img-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#img-2","aria-hidden":"true"}},[this._v("#")]),this._v(" img-2")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("先说一下img-2这个webcomponents，这个原生组件提供了四个功能\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("Only render initial images which are visible to the user")]),this._v(" "),t("li",[this._v("Pre-cache all other images off the main thread with a Web Worker")]),this._v(" "),t("li",[this._v("Lazy load images as they enter the user's viewport instantly from the cache")]),this._v(" "),t("li",[this._v("Display a blurred preview image while the user waits for initial images")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('/**\n * Methods used to pre-cache images using a WebWorker\n */\n\nImg2._worker = new Worker(window.URL.createObjectURL(\n    new Blob([`self.onmessage=${function (e) {\n        const xhr = new XMLHttpRequest();\n        function onload() {\n            self.postMessage(e.data.url);\n        }\n        xhr.responseType = "blob";\n        xhr.onload = xhr.onerror = onload;\n        xhr.open("GET", e.data.location, true);\n        xhr.send();\n    }.toString()};`], { type: "text/javascript"})\n));\n\nImg2._worker.onmessage = function (e) {\n    const slot = Img2._preCacheCallbacks[e.data];\n    if (slot !== undefined) {\n        slot.cached = true;\n        slot.cbs = slot.cbs.filter(cb => {\n            // Call the callback\n            cb();\n            // Remove the callback\n            return false;\n        });\n    }\n};\n\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var worker =new Worker('work.js’)\n")])])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ol",[r("li",[e._v("普通js函数")]),e._v(" "),r("li",[e._v("转换为js代码字符串(function.toString)")]),e._v(" "),r("li",[e._v("转换为Blob对象(new Blob())")]),e._v(" "),r("li",[e._v("转换为ObjectURL对象(URL.createObjectURL())")]),e._v(" "),r("li",[e._v("转换为webWoker对象(new Worker())")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这样就避免了比较生硬的额外创建js才能创建web worker的尴尬场面。(或者"),t("code",[this._v('<script type="text/js-worker">')]),this._v(")")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"用promise包装，从而可以在主线程随意创建webworker-将-webworker-改造成无外链文件模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用promise包装，从而可以在主线程随意创建webworker-将-webworker-改造成无外链文件模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 用promise包装，从而可以在主线程随意创建webworker 将 WebWorker 改造成无外链文件模式")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('const makeWorker = f => {\n  let pendingJobs = {}\n\n  const worker = new Worker(URL.createObjectURL(new Blob([\n    `self.onmessage = ({ data: { key, params } }) => {\n     const result = (${f.toString()})(...params)\n     postMessage({ key, result })\n    }`\n  ]),{ type: "text/javascript; charset=utf-8" }))\n\n  worker.onmessage = ({ data: { result, key } }) => {\n    pendingJobs[key](result)\n    delete pendingJobs[key]\n  }\n\n  return (...params) => new Promise(resolve => {\n    const key = String(Math.random())\n    pendingJobs[key] = resolve\n    worker.postMessage({ key, params })\n  })\n}\n\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const testFunction = num => num * 2\n\nconst testWorker = makeWorker(testFunction)\n\ntestWorker(100).then(i => console.log(i))\n")])])])}],!1,null,null,null);s.options.__file="img-2源码看动态创建webworker.md";t.default=s.exports}}]);