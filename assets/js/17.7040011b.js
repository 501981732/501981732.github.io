(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{256:function(t,n,e){"use strict";e.r(n);var a=e(0),i=Object(a.a)({},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._m(4),t._v(" "),e("p",[t._v("步骤")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),e("p",[t._v("x0：开始渐变的 x 坐标\ny0：开始渐变的 y 坐标\nx1：结束渐变的 x 坐标\ny1：结束渐变的 y 坐标")]),t._v(" "),t._m(22),t._v(" "),t._m(23),t._m(24),t._v(" "),t._m(25),t._v(" "),e("p",[t._v("scale()缩放当前绘图至更大或更小")]),t._v(" "),e("p",[t._v("rotate()旋转当前绘图")]),t._v(" "),e("p",[t._v("translate()重新映射画布上的 (0,0) 位置")]),t._v(" "),e("p",[t._v("transform()替换绘图的当前转换矩阵")]),t._v(" "),e("p",[t._v("setTransform()将当前转换重置为单位矩阵，然后运行 transform()")]),t._v(" "),t._m(26),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),e("p",[t._v("img：规定要使用的图像、画布或视频\nsx：可选。开始剪切的 x 坐标位置\nsy：可选。开始剪切的 y 坐标位置\nswidth：可选。被剪切图像的宽度\nsheight：可选。被剪切图像的高度\nx：在画布上放置图像的 x 坐标位置\ny：在画布上放置图像的 y 坐标位置\nwidth：可选。要使用的图像的宽度（伸展或缩小图像）\nheight：可选。要使用的图像的高度（伸展或缩小图像）")]),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),e("p",[t._v("setTimeout 和 setInterval 的问题是，它们都不精确。它们的内在运行机制决定了时间间隔参数实际上只是指定了把动画代码添加到浏览器 UI 线程队列中以等待执行的时间。如果队列前面已经加入了其他任务，那动画代码就要等前面的任务完成后再执行。")]),t._v(" "),t._m(38),t._m(39),t._v(" "),e("p",[t._v("分析：鼠标移动，会在经过的地方创建一个圆，圆的半径由小变大，达到某个固定大小时该圆消失。圆的颜色也是在随机变化的。")]),t._v(" "),t._m(40),t._m(41),t._v(" "),t._m(42),t._v(" "),e("p",[t._v("绘制图形时，长度与坐标应选取整数而不是浮点数，原因在于 Canvas 支持半个像素绘制。")]),t._v(" "),e("p",[t._v("会根据小数位实现插值算法实现绘制图像的反锯齿效果，如果没有必要请不要选择浮点数值。")]),t._v(" "),t._m(43),t._v(" "),e("p",[t._v("如果你使用 left、top 这些 CSS 属性来写动画的话，那么会触发整个像素渲染流程 —— paint、layout 和 composition。")]),t._v(" "),e("p",[t._v("但是使用 transform 中的 translateX/Y 来切换动画，你将会发现，这并不会触发 paint 和 layout，仅仅会触发 composition 的阶段。")]),t._v(" "),e("p",[t._v("这是因为 transform 调用的是 GPU 而不是 CPU")]),t._v(" "),t._m(44),t._v(" "),e("p",[t._v("其实就是设置缓存，绘制图像的时候在屏幕之外的地方绘制好，然后再直接拿过来用，这不就是缓存的概念吗?!︿(￣︶￣)︿.")]),t._v(" "),e("p",[t._v("建立两个 Canvas 标签，大小一致，一个正常显示，一个隐藏（缓存用的，不插入 DOM 中）。先将结果 draw 到缓存用的 canvas 上下文中，因为游离 Canvas 不会造成 UI 的渲染，所以它不会展现出来；再把缓存的内容整个裁剪再 draw 到正常显示用的 Canvas 上，这样能优化不少。")]),t._v(" "),e("p",[t._v("一个一个的粒子先在屏幕之外创建出来，然后再使用 drawImage() 方法将其“放入”到我们的主屏幕中")]),t._v(" "),t._m(45),e("p",[e("a",{attrs:{href:"https://github.com/sunshine940326/canvas",target:"_blank",rel:"noopener noreferrer"}},[t._v("各种效果"),e("OutboundLink")],1)])])},[function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"canvas"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#canvas","aria-hidden":"true"}},[this._v("#")]),this._v(" canvas")])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[this._v("如果使用 CSS 来设置宽高的话，画布就会按照 300 * 150 的比例进行缩放，也就是将 300 * 150 的页面显示在 400 * 400 的容器中,通常通过js来控制")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"canvas画圆"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#canvas画圆","aria-hidden":"true"}},[this._v("#")]),this._v(" canvas画圆")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('<canvas id="canvas">\n\n</canvas>\n\n<script>\n    var canvas = document.getElementById("canvas");\n    var context = canvas.getContext("2d"); //获取到这个 Canvas 的上下文对象\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    context.beginPath();\n    context.arc(100, 100, 50, 0, Math.PI * 2, true);\n    context.closePath();\n    context.fillStyle = \'rgb(255,255,255)\';\n    context.fill();\n<\/script>\n')])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"canvas画点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#canvas画点","aria-hidden":"true"}},[this._v("#")]),this._v(" canvas画点")])},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ol",[e("li",[t._v("创建路径 beginPath()")]),t._v(" "),e("li",[t._v("绘制路径")]),t._v(" "),e("li",[t._v("关闭路径 context.closePath()")]),t._v(" "),e("li",[t._v("设置填充颜色或描边颜色")]),t._v(" "),e("li",[t._v("填充颜色或者描边")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("context.beginPath();       // 起始一条路径，或重置当前路径\ncontext.arc(100, 100, 1, 0, Math.PI * 2, true);  // 创建弧/曲线\ncontext.closePath();       // 创建从当前点回到起始点的路径\ncontext.fillStyle = 'rgb(255,255,255)'; // 设置或返回用于填充绘画的颜色、渐变或模式\ncontext.fill();            // 填充当前绘图（路径）\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"canvas-绘制-曲线"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#canvas-绘制-曲线","aria-hidden":"true"}},[this._v("#")]),this._v(" canvas 绘制/曲线")])},function(){var t=this.$createElement,n=this._self._c||t;return n("pre",[n("code",[this._v("context.arc(x,y,r,sAngle,eAngle,counterclockwise); //arc() 方法创建弧/曲线（用于创建圆或部分圆）\n")])])},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ul",[e("li",[t._v("x：圆心的 x 坐标")]),t._v(" "),e("li",[t._v("y：圆心的 y 坐标")]),t._v(" "),e("li",[t._v("r：圆的半径")]),t._v(" "),e("li",[t._v("sAngle：起始角，以弧度计（弧的圆形的三点钟位置是 0 度）")]),t._v(" "),e("li",[t._v("eAngle：结束角，以弧度计")]),t._v(" "),e("li",[t._v("counterclockwise：可选。规定应该逆时针还是顺时针绘图。false 为顺时针，true 为逆时针")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('    var canvas = document.getElementById("canvas");\n    var context = canvas.getContext("2d");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    context.beginPath();\n    context.arc(100, 100, 50, 0, Math.PI * 0.5, false);\n    \x3c!--假如设置beginPath就是闭合的了--\x3e\n    context.strokeStyle="white";\n    context.stroke();\n')])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[this._v("stroke() ：描边")]),this._v(" "),n("li",[this._v("fill() ：填充")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"canvas绘制直线"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#canvas绘制直线","aria-hidden":"true"}},[this._v("#")]),this._v(" canvas绘制直线")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("    context.beginPath();\n    context.moveTo(50,50);\n    context.lineTo(100,100);\n  context.lineWidth = 10;\n    context.lineCap = 'round';\n    context.strokeStyle = '#fff';\n    context.stroke();\n")])])])},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ul",[e("li",[e("p",[t._v("moveTo(x,y)：把路径移动到画布中的指定点，不创建线条")])]),t._v(" "),e("li",[e("p",[t._v("lineTo(x,y)：添加一个新点，然后在画布中创建从该点到最后指定点的线条")])]),t._v(" "),e("li",[e("p",[t._v("如果没有 moveTo，那么第一次 lineTo 的就视为 moveTo")])]),t._v(" "),e("li",[e("p",[t._v("每次 lineTo 后如果没有 moveTo，那么下次 lineTo 的开始点为前一次 lineTo 的结束点。")])]),t._v(" "),e("li",[e("p",[t._v("lineCap\t设置或返回线条的结束端点样式")])]),t._v(" "),e("li",[e("p",[t._v("lineJoin\t设置或返回两条线相交时，所创建的拐角类型")])]),t._v(" "),e("li",[e("p",[t._v("lineWidth\t设置或返回当前的线条宽度")])]),t._v(" "),e("li",[e("p",[t._v("miterLimit\t设置或返回最大斜接长度")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"绘制矩形"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#绘制矩形","aria-hidden":"true"}},[this._v("#")]),this._v(" 绘制矩形")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("    context.beginPath();\n    context.fillStyle = '#fff';\n    context.fillRect(10, 10, 100, 100);\n    context.strokeStyle = '#fff';\n    context.strokeRect(130, 10, 100, 100);\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[this._v("fillRect(x,y,width,height)：绘制一个实心矩形")]),this._v(" "),n("li",[this._v("strokeRect(x,y,width,height)：绘制一个空心矩形")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"颜色、样式和阴影"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#颜色、样式和阴影","aria-hidden":"true"}},[this._v("#")]),this._v(" 颜色、样式和阴影")])},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ul",[e("li",[e("p",[t._v("fillStyle 设置或返回用于填充绘画的颜色、渐变或模式")])]),t._v(" "),e("li",[e("p",[t._v("strokeStyle 设置或返回用于笔触的颜色、渐变或模式")])]),t._v(" "),e("li",[e("p",[t._v("shadowColor 设置或返回用于阴影的颜色")])]),t._v(" "),e("li",[e("p",[t._v("shadowBlur 设置或返回用于阴影的模糊级别")])]),t._v(" "),e("li",[e("p",[t._v("shadowOffsetX 设置或返回阴影距形状的水平距离")])]),t._v(" "),e("li",[e("p",[t._v("shadowOffsetY 设置或返回阴影距形状的垂直距离")])]),t._v(" "),e("li",[e("p",[t._v("fillStyle 和 strokeStyle 这两个属性我们一直在使用，所以对于它们我们不再作过多的介绍。")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"渐变"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#渐变","aria-hidden":"true"}},[this._v("#")]),this._v(" 渐变")])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[this._v("createLinearGradient(x0,y0,x1,y1) 创建线性渐变（用在画布内容上）")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[n("p",[this._v("createPattern() 在指定的方向上重复指定的元素")])]),this._v(" "),n("li",[n("p",[this._v("createRadialGradient() 创建放射状/环形的渐变（用在画布内容上）")])]),this._v(" "),n("li",[n("p",[this._v("addColorStop() 规定渐变对象中的颜色和停止位置")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    var grd = context.createLinearGradient(100,100,100,200);\n    grd.addColorStop(0,'pink');\n    grd.addColorStop(1,'white');\n\n    context.fillStyle = grd;\n    context.fillRect(100,100,200,200);\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"图形转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图形转换","aria-hidden":"true"}},[this._v("#")]),this._v(" 图形转换")])},function(){var t=this.$createElement,n=this._self._c||t;return n("pre",[n("code",[this._v("在进行图形变换的时候，我们需要画布旋转，然后再绘制图形。\n这样的结果是，我们使用的图形变换的方法都是作用在画布上的，既然对画布进行了变换，那么在接下来绘制的图形都会变换。这点是需要注意的。\n")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("    context.strokeStyle = 'white';\n    context.strokeRect(5,5,50,25);\n    context.scale(2,2);\n    context.strokeRect(5,5,50,25);\n    context.scale(2,2);\n    context.strokeRect(5,5,50,25);\n\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[this._v("在设置 scale() 方法之后再设置的矩形，无论是线条的宽度还是坐标的位置，都被放大了")]),this._v(" "),n("li",[this._v("scale() 的效果是可以叠加的,我们在上面的例子中使用了两次 scale(2,2) 那么，最后一个矩形相对于第一个矩形长和宽，以及坐标的位置就放大了 4 倍。")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"图形绘制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图形绘制","aria-hidden":"true"}},[this._v("#")]),this._v(" 图形绘制")])},function(){var t=this.$createElement,n=this._self._c||t;return n("pre",[n("code",[this._v("context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);\n")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"酷炫背景效果通性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#酷炫背景效果通性","aria-hidden":"true"}},[this._v("#")]),this._v(" 酷炫背景效果通性")])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[this._v("背景 --- 纯色、渐变或可平铺的图形")]),this._v(" "),n("li",[this._v("炫酷 --- 动 随机")]),this._v(" "),n("li",[this._v("效果 --- 与鼠标的交互（鼠标跟随 视觉差）")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"怎么实现随机粒子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#怎么实现随机粒子","aria-hidden":"true"}},[this._v("#")]),this._v(" 怎么实现随机粒子")])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[this._v("粒子")]),this._v(" "),n("li",[this._v("规则图形")]),this._v(" "),n("li",[this._v("随机")]),this._v(" "),n("li",[this._v("数量多")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>Title</title>\n    <style>\n        html,body {\n            margin:0;\n            overflow:hidden;\n            width:100%;\n            height:100%;\n            cursor:none;\n            background:black;\n        }\n    </style>\n</head>\n<body>\n<canvas id="canvas"></canvas>\n\n<script>\n    var ctx = document.getElementById(\'canvas\'),\n        content = ctx.getContext(\'2d\'),\n        round = [],\n        WIDTH,\n        HEIGHT,\n        initRoundPopulation = 80;\n\n\n    WIDTH = document.documentElement.clientWidth;\n    HEIGHT = document.documentElement.clientHeight;\n\n    ctx.width = WIDTH;\n    ctx.height = HEIGHT;\n\n    function Round_item(index,x,y) {\n        this.index = index;\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 2 + 1;\n        var alpha = (Math.floor(Math.random() * 10) + 1) / 10 / 2;\n        this.color = "rgba(255,255,255," + alpha + ")";\n    }\n\n    Round_item.prototype.draw = function () {\n        content.fillStyle = this.color;\n        content.shadowBlur = this.r * 2;\n        content.beginPath();\n        content.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n        content.closePath();\n        content.fill();\n    };\n\n    function init() {\n        for(var i = 0; i < initRoundPopulation; i++ ){\n            round[i] = new Round_item(i,Math.random() * WIDTH,Math.random() * HEIGHT);\n            round[i].draw();\n        }\n\n    }\n\n    init();\n<\/script>\n</body>\n</html>\n')])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"使你的随机粒子效果动起来"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使你的随机粒子效果动起来","aria-hidden":"true"}},[this._v("#")]),this._v(" 使你的随机粒子效果动起来")])},function(){var t=this.$createElement,n=this._self._c||t;return n("pre",[n("code",[this._v("Canvas 制作动画是一个不断擦除再重绘的过程，跟最原始实现动画的方式类似。在纸片上画每一帧，然后以很快的速度翻动小本本，就会有动画的效果。\n现在我们实现动画需要在很短的时间内不断的清除内容再重新绘制，新的图形和原先清除的图形之间有某种位置关系，速度足够快的话，我们就会看到动画的效果\n\ncontext.clearRect(x,y,width,height);\n")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[this._v("x：要清除的矩形左上角的 x 坐标")]),this._v(" "),n("li",[this._v("y：要清除的矩形左上角的 y 坐标")]),this._v(" "),n("li",[this._v("width：要清除的矩形的宽度，以像素计")]),this._v(" "),n("li",[this._v("height：要清除的矩形的高度，以像素计")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("    function animate() {\n        content.clearRect(0, 0, WIDTH, HEIGHT);\n\n        for (var i in round) {\n            round[i].move();\n        }\n        requestAnimationFrame(animate)\n    }\n    Round_item.prototype.move = function () {\n        this.y -= 0.15;\n        if (this.y <= -10) {\n            this.y = HEIGHT + 10;\n        }\n        this.draw();\n    };\n我们只需要改变 round 的 y 坐标即可，并且设置边界条件，当 y 坐标的值小于 -10（也可以是其他负值），代表该 round 已经超出了屏幕，这个时候我们要将其移动到屏幕的最底端，\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"使你的鼠标和屏幕互动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使你的鼠标和屏幕互动","aria-hidden":"true"}},[this._v("#")]),this._v(" 使你的鼠标和屏幕互动")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("<script>\n\n\n        var canvas = document.getElementById('canvas'),\n            ctx = canvas.getContext('2d'),\n            WIDTH = canvas.width = document.documentElement.clientWidth,\n            HEIGHT = canvas.height = document.documentElement.clientHeight,\n            para = {\n                num: 100,\n                color: false,    //  颜色  如果是false 则是随机渐变颜色\n                r: 0.9,\n                o: 0.09,         //  判断圆消失的条件，数值越大，消失的越快\n                a: 1,\n\n            },\n            color,\n            color2,\n            round_arr = [];\n\n\n\n\n\n        window.onmousemove = function (event) {\n\n            mouseX = event.clientX;\n            mouseY = event.clientY;\n\n            round_arr.push({\n                mouseX: mouseX,\n                mouseY: mouseY,\n                r: para.r,\n                o: 1\n            })\n        };\n\n\n        // 判断参数中是否设置了 color，如果设置了 color，就使用该值、\n        // 如果参数中的 color 为 false，那么就使用随机的颜色\n        if (para.color) {\n            color2 = para.color;\n        } else {\n            color = Math.random() * 360;\n        }\n\n        function animate() {\n\n            if (!para.color) {\n                color += .1;\n                color2 = 'hsl(' + color + ',100%,80%)';\n            }\n\n            ctx.clearRect(0, 0, WIDTH, HEIGHT);\n\n            for (var i = 0; i < round_arr.length; i++) {\n\n                ctx.fillStyle = color2;\n                ctx.beginPath();\n                ctx.arc( round_arr[i].mouseX ,round_arr[i].mouseY,round_arr[i].r,0, Math.PI * 2);\n                ctx.closePath();\n                ctx.fill();\n                round_arr[i].r += para.r;\n                round_arr[i].o -= para.o;\n\n                if( round_arr[i].o <= 0){\n                    round_arr.splice(i,1);\n                    i--;\n                }\n            }\n\n            window.requestAnimationFrame(animate);\n        };\n\n        animate();\n<\/script>\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"更优雅"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#更优雅","aria-hidden":"true"}},[this._v("#")]),this._v(" 更优雅")])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[this._v("避免浮点数的坐标点")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[n("p",[this._v("使用多层画布去画一个复杂的场景\n比如在游戏中，背景不经常变换和人物这些经常变换的元素分成不同的层，这样需要重绘的资源就会少很多。")])]),this._v(" "),n("li",[n("p",[this._v("用 CSS transform 特性缩放画布")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[this._v("离屏渲染")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>Title</title>\n    <style>\n        html, body {\n            margin: 0;\n            overflow: hidden;\n            width: 100%;\n            height: 100%;\n            cursor: none;\n            background: black;\n        }\n    </style>\n</head>\n<body>\n<canvas id="canvas"></canvas>\n\n<script>\n    var ctx = document.getElementById(\'canvas\'),\n        content = ctx.getContext(\'2d\'),\n        round = [],\n        WIDTH,\n        HEIGHT,\n        initRoundPopulation = 80,\n        useChache = true;\n\n\n\n    WIDTH = document.documentElement.clientWidth;\n    HEIGHT = document.documentElement.clientHeight;\n\n    ctx.width = WIDTH;\n    ctx.height = HEIGHT;\n\n    function Round_item(index, x, y) {\n        this.index = index;\n        this.x = x;\n        this.y = y;\n        this.useCache = useChache;\n        this.cacheCanvas = document.createElement("canvas");\n        this.cacheCtx = this.cacheCanvas.getContext("2d");\n\n        this.cacheCtx.width = 6 * this.r;\n        this.cacheCtx.height = 6 * this.r;\n        this.r = Math.random() * 2 + 1;\n        var alpha = (Math.floor(Math.random() * 10) + 1) / 10 / 2;\n        this.color = "rgba(255,255,255," + alpha + ")";\n\n        if(useChache){\n            this.cache();\n        }\n    }\n\n    Round_item.prototype.draw = function () {\n\n        if( !useChache){\n            content.fillStyle = this.color;\n            content.shadowBlur = this.r * 2;\n            content.beginPath();\n            content.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n            content.closePath();\n            content.fill();\n        }else{\n            content.drawImage(this.cacheCanvas, this.x - this.r, this.y - this.r);\n        }\n\n    };\n\n    Round_item.prototype.cache = function () {\n        this.cacheCtx.save();\n        this.cacheCtx.fillStyle = this.color;\n        this.cacheCtx.shadowColor = "white";\n        this.cacheCtx.shadowBlur = this.r * 2;\n        this.cacheCtx.beginPath();\n        this.cacheCtx.arc(this.r * 3, this.r * 3, this.r, 0, 2 * Math.PI);\n        this.cacheCtx.closePath();\n        this.cacheCtx.fill();\n        this.cacheCtx.restore();\n    };\n    function animate() {\n        content.clearRect(0, 0, WIDTH, HEIGHT);\n\n        for (var i in round) {\n            round[i].move();\n        }\n        requestAnimationFrame(animate)\n    }\n\n    Round_item.prototype.move = function () {\n        this.y -= 0.15;\n        if (this.y <= -10) {\n            this.y = HEIGHT + 10;\n        }\n        this.draw();\n    };\n\n\n    function init() {\n        for (var i = 0; i < initRoundPopulation; i++) {\n            round[i] = new Round_item(i, Math.random() * WIDTH, Math.random() * HEIGHT);\n            round[i].draw();\n        }\n        animate();\n\n    }\n\n    init();\n<\/script>\n</body>\n</html>\n')])])])}],!1,null,null,null);i.options.__file="canvas了解下.md";n.default=i.exports}}]);