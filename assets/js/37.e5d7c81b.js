(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{211:function(e,n,t){"use strict";t.r(n);var a=t(0),s=Object(a.a)({},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"content"},[e._m(0),e._v(" "),t("p",[t("a",{attrs:{href:"http://webpack.wuhaolin.cn/5%E5%8E%9F%E7%90%86/",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack原理"),t("OutboundLink")],1)]),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),t("p",[e._v("在了解 Webpack 原理前，需要掌握以下几个核心概念，以方便后面的理解：")]),e._v(" "),e._m(3),e._v(" "),t("p",[e._v("###流程概括")]),e._v(" "),t("p",[e._v("Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：")]),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),t("p",[e._v("Webpack 的构建流程可以分为以下三大阶段：")]),e._v(" "),e._m(6),e._v(" "),t("p",[e._v("在每个大阶段中又会发生很多事件，Webpack 会把这些事件广播出来供给 Plugin 使用，下面来一一介绍。")]),e._v(" "),t("p",[e._v("###初始化阶段\n事件名\t解释\n初始化参数\t从配置文件和 Shell 语句中读取与合并参数，得出最终的参数。 这个过程中还会执行配置文件中的插件实例化语句 new Plugin()。\n实例化 Compiler\t用上一步得到的参数初始化 Compiler 实例，Compiler 负责文件监听和启动编译。Compiler 实例中包含了完整的 Webpack 配置，全局只有一个 Compiler 实例。\n加载插件\t依次调用插件的 apply 方法，让插件可以监听后续的所有事件节点。同时给插件传入 compiler 实例的引用，以方便插件通过 compiler 调用 Webpack 提供的 API。\nenvironment\t开始应用 Node.js 风格的文件系统到 compiler 对象，以方便后续的文件寻找和读取。\nentry-option\t读取配置的 Entrys，为每个 Entry 实例化一个对应的 EntryPlugin，为后面该 Entry 的递归解析工作做准备。\nafter-plugins\t调用完所有内置的和配置的插件的 apply 方法。\nafter-resolvers\t根据配置初始化完 resolver，resolver 负责在文件系统中寻找指定路径的文件。")]),e._v(" "),t("p",[e._v("###编译阶段\nheader 1 | header 2")]),e._v(" "),e._m(7),e._v(" "),t("p",[e._v("run\t|启动一次新的编译。\nwatch-run\t|和 run 类似，区别在于它是在监听模式下启动的编译，在这个事件中可以获取到是哪些文件发生了变化导致重新启动一次新的编译。\ncompile|\t该事件是为了告诉插件一次新的编译将要启动，同时会给插件带上 compiler 对象。\ncompilation\t|当 Webpack 以开发模式运行时，每当检测到文件变化，一次新的 Compilation 将被创建。一个 Compilation 对象包含了当前的模块资源、编译生成资源、变化的文件等。Compilation 对象也提供了很多事件回调供插件做扩展。\nmake\t|一个新的 Compilation 创建完毕，即将从 Entry 开始读取文件，根据文件类型和配置的 Loader 对文件进行编译，编译完后再找出该文件依赖的文件，递归的编译和解析。\nafter-compile\t|一次 Compilation 执行完成。\ninvalid\t| 当遇到文件不存在、文件编译错误等异常时会触发该事件，该事件不会导致 Webpack 退出。")]),e._v(" "),t("p",[e._v("在编译阶段中，最重要的要数 compilation 事件了，因为在 compilation 阶段调用了 Loader 完成了每个模块的转换操作，在 compilation 阶段又包括很多小的事件，它们分别是：")]),e._v(" "),e._m(8),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),t("p",[e._v("在输出阶段已经得到了各个模块经过转换后的结果和其依赖关系，并且把相关模块组合在一起形成一个个 Chunk。 在输出阶段会根据 Chunk 的类型，使用对应的模版生成最终要要输出的文件内容。")]),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),t("p",[e._v("先来看代码如下：")]),e._v(" "),e._m(13),t("p",[e._v("以上看上去复杂的代码其实是一个立即执行函数，可以简写为如下：")]),e._v(" "),e._m(14),e._m(15),e._v(" "),t("p",[e._v("原来一个个独立的模块文件被合并到了一个单独的 bundle.js 的原因在于浏览器不能像 Node.js 那样快速地去本地加载一个个模块文件，而必须通过网络请求去加载还未得到的文件。 如果模块数量很多，加载时间会很长，因此把所有模块都存放在了数组中，执行一次网络加载。")]),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),t("p",[e._v("在采用按需加载 中介绍过的优化方法时，Webpack 的输出文件会发生变化。")]),e._v(" "),t("p",[e._v("例如把源码中的 main.js 修改为如下：")]),e._v(" "),e._m(18),t("p",[e._v("重新构建后会输出两个文件，分别是执行入口文件 bundle.js 和 异步加载文件 0.bundle.js。")]),e._v(" "),t("p",[e._v("其中 0.bundle.js 内容如下：")]),e._v(" "),e._m(19),t("p",[e._v("bundle.js 内容如下：")]),e._v(" "),e._m(20),t("p",[e._v("这里的 bundle.js 和上面所讲的 bundle.js 非常相似，区别在于：")]),e._v(" "),e._m(21),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),e._m(25),e._m(26),e._v(" "),e._m(27),e._v(" "),t("p",[e._v("this.callback用法")]),e._v(" "),e._m(28),e._m(29),e._v(" "),e._m(30),e._v(" "),e._m(31),e._m(32),e._v(" "),t("p",[e._v("我们现在写一个loader实例实现下面功能：")]),e._v(" "),e._m(33),e._v(" "),e._m(34),e._m(35),e._v(" "),e._m(36),e._v(" "),e._m(37),e._m(38),e._v(" "),t("p",[e._v("当webpack执行的时候，会 new一个plugin实例，在初始化compiler对象后再调用插件basicPlugin.apply(compiler)的方法,给插件实例传入compiler, 插件实例获取到compiler对象后， 可以通过 compiler.plugin(事件名，回调) 监听webpack广播的时间，并通过compiler对象操作webpack")]),e._v(" "),t("p",[e._v("*** Compiler 和 Compilation")]),e._v(" "),t("p",[e._v("这两个是plugin与webpack沟通的桥梁")]),e._v(" "),e._m(39),e._v(" "),e._m(40),e._v(" "),t("p",[e._v("Webpack 就像一条生产线，要经过一系列处理流程后才能将源文件转换成输出结果。 这条生产线上的每个处理流程的职责都是单一的，多个流程之间有存在依赖关系，只有完成当前处理后才能交给下一个流程去处理。 插件就像是一个插入到生产线中的一个功能，在特定的时机对生产线上的资源做处理。")]),e._v(" "),t("p",[e._v("Webpack 通过 Tapable 来组织这条复杂的生产线。 Webpack 在运行过程中会广播事件，插件只需要监听它所关心的事件，就能加入到这条生产线中，去改变生产线的运作。 Webpack 的事件流机制保证了插件的有序性，使得整个系统扩展性很好。")]),e._v(" "),t("p",[e._v("Webpack 的事件流机制应用了观察者模式，和 Node.js 中的 EventEmitter 非常相似。 Compiler 和 Compilation 都继承自 Tapable，可以直接在 Compiler 和 Compilation 对象上广播和监听事件，方法如下：")]),e._v(" "),e._m(41),e._m(42),e._v(" "),e._m(43),e._v(" "),e._m(44),t("p",[e._v("###常用API")]),e._v(" "),e._m(45),e._v(" "),t("p",[e._v("在 emit 事件发生时，代表源文件的转换和组装已经完成，在这里可以读取到最终将输出的资源、代码块、模块及其依赖，并且可以修改输出资源的内容。 插件代码如下")]),e._v(" "),e._m(46),e._m(47),e._v(" "),e._m(48),t("p",[e._v("默认情况下 Webpack只会监视入口和其依赖的模块是否发生变化，在有些情况下项目可能需要引入新的文件，例如引入一个 HTML 文件。 由于 JavaScript 文件不会去导入 HTML 文件，Webpack 就不会监听 HTML 文件的变化，编辑 HTML 文件时就不会重新触发新的 Compilation。 为了监听 HTML 文件的变化，我们需要把 HTML 文件加入到依赖列表中，为此可以使用如下代码：")]),e._v(" "),e._m(49),e._m(50),e._v(" "),t("p",[e._v("有些场景下插件需要修改、增加、删除输出的资源，要做到这点需要监听 emit 事件，因为发生 emit 事件时所有模块的转换和代码块对应的文件已经生成好， 需要输出的资源即将输出，因此 emit 事件是修改 Webpack 输出资源的最后时机。")]),e._v(" "),t("p",[e._v("所有需要输出的资源会存放在 compilation.assets 中，compilation.assets 是一个键值对，键为需要输出的文件名称，值为文件对应的内容。")]),e._v(" "),t("p",[e._v("设置 compilation.assets 的代码如下：")]),e._v(" "),e._m(51),t("p",[e._v("读取 compilation.assets 的代码如下：")]),e._v(" "),e._m(52),e._m(53),e._v(" "),e._m(54),e._m(55),e._v(" "),e._m(56),e._v(" "),e._m(57),e._m(58),e._v(" "),e._m(59)])},[function(){var e=this.$createElement,n=this._self._c||e;return n("h2",{attrs:{id:"webpack原理概括"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#webpack原理概括","aria-hidden":"true"}},[this._v("#")]),this._v(" webpack原理概括")])},function(){var e=this.$createElement,n=this._self._c||e;return n("blockquote",[n("p",[this._v("Webpack 以其使用简单著称，在使用它的过程中，使用者只需把它当作一个黑盒，需要关心的只有它暴露出来的配置。 本节将带你走进这个黑盒，看看 Webpack 是如何运行的。")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"基本概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本概念","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本概念")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ul",[t("li",[e._v("Entry：入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。")]),e._v(" "),t("li",[e._v("Module：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的")]),e._v(" "),t("li",[e._v("Entry 开始递归找出所有依赖的模块。")]),e._v(" "),t("li",[e._v("Chunk：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。")]),e._v(" "),t("li",[e._v("Loader：模块转换器，用于把模块原内容按照需求转换成新内容。")]),e._v(" "),t("li",[e._v("Plugin：扩展插件，在 Webpack 构建流程中的特定时机会广播出对应的事件，插件可以监听这些事件的发生，在特定时机做对应的事情。")])])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ul",[t("li",[e._v("初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；")]),e._v(" "),t("li",[e._v("开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；")]),e._v(" "),t("li",[e._v("确定入口：根据配置中的 entry 找出所有的入口文件；")]),e._v(" "),t("li",[e._v("编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；")]),e._v(" "),t("li",[e._v("完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；")]),e._v(" "),t("li",[e._v("输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；")]),e._v(" "),t("li",[e._v("输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。\n在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"流程细节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#流程细节","aria-hidden":"true"}},[this._v("#")]),this._v(" 流程细节")])},function(){var e=this.$createElement,n=this._self._c||e;return n("ul",[n("li",[this._v("初始化：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler。")]),this._v(" "),n("li",[this._v("编译：从 Entry 发出，针对每个 Module 串行调用对应的 Loader 去翻译文件内容，再找到该 Module 依赖的 Module，递归地进行编译处理。")]),this._v(" "),n("li",[this._v("输出：对编译后的 Module 组合成 Chunk，把 Chunk 转换成文件，输出到文件系统。\n如果只执行一次构建，以上阶段将会按照顺序各执行一次。但在开启监听模式下，流程将变为如下：")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("table",[n("thead",[n("tr",[n("th",[this._v("事件名")]),this._v(" "),n("th",[this._v("解释")])])]),this._v(" "),n("tbody")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("table",[t("thead",[t("tr",[t("th",[e._v("事件名")]),e._v(" "),t("th",[e._v("解释")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("build-module")]),e._v(" "),t("td",[e._v("使用对应的 Loader 去转换一个模块。")])]),e._v(" "),t("tr",[t("td",[e._v("normal-module-loader")]),e._v(" "),t("td",[e._v("在用 Loader 对一个模块转换完后，使用 acorn 解析转换后的内容，输出对应的抽象语法树（AST），以方便 Webpack 后面对代码的分析。")])]),e._v(" "),t("tr",[t("td",[e._v("program")]),e._v(" "),t("td",[e._v("从配置的入口模块开始，分析其 AST，当遇到 require 等导入其它模块语句时，便将其加入到依赖的模块列表，同时对新找出的依赖模块递归分析，最终搞清所有模块的依赖关系。")])]),e._v(" "),t("tr",[t("td",[e._v("seal")]),e._v(" "),t("td",[e._v("所有模块及其依赖的模块都通过 Loader 转换完成后，根据依赖关系开始生成 Chunk。")])])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"输出阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#输出阶段","aria-hidden":"true"}},[this._v("#")]),this._v(" 输出阶段")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("table",[t("thead",[t("tr",[t("th",[e._v("事件名")]),e._v(" "),t("th",[e._v("解释")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("should-emit")]),e._v(" "),t("td",[e._v("所有需要输出的文件已经生成好，询问插件哪些文件需要输出，哪些不需要。")])]),e._v(" "),t("tr",[t("td",[e._v("emit")]),e._v(" "),t("td",[e._v("确定好要输出哪些文件后，执行文件输出，可以在这里获取和修改输出内容。")])]),e._v(" "),t("tr",[t("td",[e._v("after-emit")]),e._v(" "),t("td",[e._v("文件输出完毕。")])]),e._v(" "),t("tr",[t("td",[e._v("done")]),e._v(" "),t("td",[e._v("成功完成一次完成的编译和输出流程。")])]),e._v(" "),t("tr",[t("td",[e._v("failed")]),e._v(" "),t("td",[e._v("如果在编译和输出流程中遇到异常导致 Webpack 退出时，就会直接跳转到本步骤，插件可以在本事件中获取到具体的错误原因。")])])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h2",{attrs:{id:"输出文件分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#输出文件分析","aria-hidden":"true"}},[this._v("#")]),this._v(" 输出文件分析")])},function(){var e=this.$createElement,n=this._self._c||e;return n("blockquote",[n("p",[this._v("虽然在前面的章节中你学会了如何使用 Webpack ，也大致知道其工作原理，可是你想过 Webpack 输出的 bundle.js 是什么样子的吗？ 为什么原来一个个的模块文件被合并成了一个单独的文件？为什么 bundle.js 能直接运行在浏览器中？ 本节将解释清楚以上问题。")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("(\n    // webpackBootstrap 启动函数\n    // modules 即为存放所有模块的数组，数组中的每一个元素都是一个函数\n    function (modules) {\n        // 安装过的模块都存放在这里面\n        // 作用是把已经加载过的模块缓存在内存中，提升性能\n        var installedModules = {};\n\n        // 去数组中加载一个模块，moduleId 为要加载模块在数组中的 index\n        // 作用和 Node.js 中 require 语句相似\n        function __webpack_require__(moduleId) {\n            // 如果需要加载的模块已经被加载过，就直接从内存缓存中返回\n            if (installedModules[moduleId]) {\n                return installedModules[moduleId].exports;\n            }\n\n            // 如果缓存中不存在需要加载的模块，就新建一个模块，并把它存在缓存中\n            var module = installedModules[moduleId] = {\n                // 模块在数组中的 index\n                i: moduleId,\n                // 该模块是否已经加载完毕\n                l: false,\n                // 该模块的导出值\n                exports: {}\n            };\n\n            // 从 modules 中获取 index 为 moduleId 的模块对应的函数\n            // 再调用这个函数，同时把函数需要的参数传入\n            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n            // 把这个模块标记为已加载\n            module.l = true;\n            // 返回这个模块的导出值\n            return module.exports;\n        }\n\n        // Webpack 配置中的 publicPath，用于加载被分割出去的异步代码\n        __webpack_require__.p = \"\";\n\n        // 使用 __webpack_require__ 去加载 index 为 0 的模块，并且返回该模块导出的内容\n        // index 为 0 的模块就是 main.js 对应的文件，也就是执行入口模块\n        // __webpack_require__.s 的含义是启动模块对应的 index\n        return __webpack_require__(__webpack_require__.s = 0);\n\n    })(\n\n    // 所有的模块都存放在了一个数组里，根据每个模块在数组的 index 来区分和定位模块\n    [\n        /* 0 */\n        (function (module, exports, __webpack_require__) {\n            // 通过 __webpack_require__ 规范导入 show 函数，show.js 对应的模块 index 为 1\n            const show = __webpack_require__(1);\n            // 执行 show 函数\n            show('Webpack');\n        }),\n        /* 1 */\n        (function (module, exports) {\n            function show(content) {\n                window.document.getElementById('app').innerText = 'Hello,' + content;\n            }\n            // 通过 CommonJS 规范导出 show 函数\n            module.exports = show;\n        })\n    ]\n);\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("(function(modules) {\n\n  // 模拟 require 语句\n  function __webpack_require__() {\n  }\n\n  // 执行存放所有模块数组中的第0个模块\n  __webpack_require__(0);\n\n})([/*存放所有模块的数组*/])\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("bundle.js 能直接运行在浏览器中的原因在于输出的文件中通过 "),n("strong",[this._v("webpack_require")]),this._v(" 函数定义了一个可以在浏览器中执行的加载函数来模拟 Node.js 中的 require 语句。")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("如果仔细分析 "),n("strong",[this._v("webpack_require")]),this._v(" 函数的实现，你还有发现 Webpack 做了缓存优化： 执行加载过的模块不会再执行第二次，执行结果会缓存在内存中，当某个模块第二次被访问时会直接去内存中读取被缓存的返回值。")])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"分割代码时的输出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分割代码时的输出","aria-hidden":"true"}},[this._v("#")]),this._v(" 分割代码时的输出")])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("// 异步加载 show.js\nimport('./show').then((show) => {\n  // 执行 show 函数\n  show('Webpack');\n});\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("// 加载在本文件(0.bundle.js)中包含的模块\nwebpackJsonp(\n  // 在其它文件中存放着的模块的 ID\n  [0],\n  // 本文件所包含的模块\n  [\n    // show.js 所对应的模块\n    (function (module, exports) {\n      function show(content) {\n        window.document.getElementById('app').innerText = 'Hello,' + content;\n      }\n\n      module.exports = show;\n    })\n  ]\n);\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("(function (modules) {\n  /***\n   * webpackJsonp 用于从异步加载的文件中安装模块。\n   * 把 webpackJsonp 挂载到全局是为了方便在其它文件中调用。\n   *\n   * @param chunkIds 异步加载的文件中存放的需要安装的模块对应的 Chunk ID\n   * @param moreModules 异步加载的文件中存放的需要安装的模块列表\n   * @param executeModules 在异步加载的文件中存放的需要安装的模块都安装成功后，需要执行的模块对应的 index\n   */\n  window[\"webpackJsonp\"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {\n    // 把 moreModules 添加到 modules 对象中\n    // 把所有 chunkIds 对应的模块都标记成已经加载成功 \n    var moduleId, chunkId, i = 0, resolves = [], result;\n    for (; i < chunkIds.length; i++) {\n      chunkId = chunkIds[i];\n      if (installedChunks[chunkId]) {\n        resolves.push(installedChunks[chunkId][0]);\n      }\n      installedChunks[chunkId] = 0;\n    }\n    for (moduleId in moreModules) {\n      if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n        modules[moduleId] = moreModules[moduleId];\n      }\n    }\n    while (resolves.length) {\n      resolves.shift()();\n    }\n  };\n\n  // 缓存已经安装的模块\n  var installedModules = {};\n\n  // 存储每个 Chunk 的加载状态；\n  // 键为 Chunk 的 ID，值为0代表已经加载成功\n  var installedChunks = {\n    1: 0\n  };\n\n  // 模拟 require 语句，和上面介绍的一致\n  function __webpack_require__(moduleId) {\n    // ... 省略和上面一样的内容\n  }\n\n  /**\n   * 用于加载被分割出去的，需要异步加载的 Chunk 对应的文件\n   * @param chunkId 需要异步加载的 Chunk 对应的 ID\n   * @returns {Promise}\n   */\n  __webpack_require__.e = function requireEnsure(chunkId) {\n    // 从上面定义的 installedChunks 中获取 chunkId 对应的 Chunk 的加载状态\n    var installedChunkData = installedChunks[chunkId];\n    // 如果加载状态为0表示该 Chunk 已经加载成功了，直接返回 resolve Promise\n    if (installedChunkData === 0) {\n      return new Promise(function (resolve) {\n        resolve();\n      });\n    }\n\n    // installedChunkData 不为空且不为0表示该 Chunk 正在网络加载中\n    if (installedChunkData) {\n      // 返回存放在 installedChunkData 数组中的 Promise 对象\n      return installedChunkData[2];\n    }\n\n    // installedChunkData 为空，表示该 Chunk 还没有加载过，去加载该 Chunk 对应的文件\n    var promise = new Promise(function (resolve, reject) {\n      installedChunkData = installedChunks[chunkId] = [resolve, reject];\n    });\n    installedChunkData[2] = promise;\n\n    // 通过 DOM 操作，往 HTML head 中插入一个 script 标签去异步加载 Chunk 对应的 JavaScript 文件\n    var head = document.getElementsByTagName('head')[0];\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.charset = 'utf-8';\n    script.async = true;\n    script.timeout = 120000;\n\n    // 文件的路径为配置的 publicPath、chunkId 拼接而成\n    script.src = __webpack_require__.p + \"\" + chunkId + \".bundle.js\";\n\n    // 设置异步加载的最长超时时间\n    var timeout = setTimeout(onScriptComplete, 120000);\n    script.onerror = script.onload = onScriptComplete;\n\n    // 在 script 加载和执行完成时回调\n    function onScriptComplete() {\n      // 防止内存泄露\n      script.onerror = script.onload = null;\n      clearTimeout(timeout);\n\n      // 去检查 chunkId 对应的 Chunk 是否安装成功，安装成功时才会存在于 installedChunks 中\n      var chunk = installedChunks[chunkId];\n      if (chunk !== 0) {\n        if (chunk) {\n          chunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));\n        }\n        installedChunks[chunkId] = undefined;\n      }\n    };\n    head.appendChild(script);\n\n    return promise;\n  };\n\n  // 加载并执行入口模块，和上面介绍的一致\n  return __webpack_require__(__webpack_require__.s = 0);\n})\n(\n  // 存放所有没有经过异步加载的，随着执行入口文件加载的模块\n  [\n    // main.js 对应的模块\n    (function (module, exports, __webpack_require__) {\n      // 通过 __webpack_require__.e 去异步加载 show.js 对应的 Chunk\n      __webpack_require__.e(0).then(__webpack_require__.bind(null, 1)).then((show) => {\n        // 执行 show 函数\n        show('Webpack');\n      });\n    })\n  ]\n);\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("多了一个 "),n("strong",[this._v("webpack_require")]),this._v(".e 用于加载被分割出去的，需要异步加载的 Chunk 对应的文件;\n多了一个 webpackJsonp 函数用于从异步加载的文件中安装模块。\n在使用了 CommonsChunkPlugin 去提取公共代码时输出的文件和使用了异步加载时输出的文件是一样的，都会有 "),n("strong",[this._v("webpack_require")]),this._v(".e 和 webpackJsonp。 原因在于提取公共代码和异步加载本质上都是代码分割。")])},function(){var e=this.$createElement,n=this._self._c||e;return n("h2",{attrs:{id:"编写loader"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编写loader","aria-hidden":"true"}},[this._v("#")]),this._v(" 编写Loader")])},function(){var e=this.$createElement,n=this._self._c||e;return n("blockquote",[n("p",[this._v("loader 就是一个翻译 能把源文件经过转化输出新的结果。一个文件可以经过多次翻译\n开发loader时 要保持单一责任原则， 只关心输入和输出")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("ol",[n("li",[this._v("一个Loader就是一个Node.js模块")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("const loaderUtils = require('loader-utils');\nmodule.exports = function(source) {\n  // source 为 compiler 传递给 Loader 的一个文件的原内容\n  // 该函数需要返回处理后的内容，这里简单起见，直接把原内容返回了，相当于该 Loader 没有做任何转换\n  \n  //获取用户给当前loader传入的options\n  const options = loaderUtils.getOptions(this)\n  return source;\n};\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("ol",{attrs:{start:"2"}},[n("li",[this._v("返回除了原内容转换后的内容还需要别的内容(比如source Map)，则需要 this.callback()")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("blockquote",[n("p",[this._v("this.callback 是webpack给loader注入的API 方便loader和webpack通信")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("\t\tthis.callback(\n\t\t    // 当无法转换原内容时，给 Webpack 返回一个 Error\n\t\t    err: Error | null,\n\t\t    // 原内容转换后的内容\n\t\t    content: string | Buffer,\n\t\t    // 用于把转换后的内容得出原内容的 Source Map，方便调试\n\t\t    sourceMap?: SourceMap,\n\t\t    // 如果本次转换为原内容生成了 AST 语法树，可以把这个 AST 返回，\n\t\t    // 以方便之后需要 AST 的 Loader 复用该 AST，以避免重复生成 AST，提升性能\n\t\t    abstractSyntaxTree?: AST\n\t\t);\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",[n("code",[this._v("```\n\tmodule.exports = function(source) {\n\t  // 通过 this.callback 告诉 Webpack 返回的结果\n\t  this.callback(null, source, sourceMaps);\n\t  // 当你使用 this.callback 返回内容时，该 Loader 必须返回 undefined，\n\t  // 以让 Webpack 知道该 Loader 返回的结果在 this.callback 中，而不是 return 中 \n\t  return;\n\t};\n```\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("ol",{attrs:{start:"3"}},[n("li",[this._v("异步返回写法")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("module.exports = function(source) {\n    // 告诉 Webpack 本次转换是异步的，Loader 会在 callback 中回调结果\n    var callback = this.async();\n    someAsyncOperation(source, function(err, result, sourceMaps, ast) {\n        // 通过 callback 返回异步执行后的结果\n        callback(err, result, sourceMaps, ast);\n    });\n};\n}\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实例","aria-hidden":"true"}},[this._v("#")]),this._v(" 实例")])},function(){var e=this.$createElement,n=this._self._c||e;return n("ul",[n("li",[this._v("假如搜索到‘wangmeng’就默认修改为‘王猛好帅’")]),this._v(" "),n("li",[this._v("假如传一个参数 q='真的好帅'，则默认替换为 '王猛真的好帅'")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("const loaderUtils = require('loader-utils');\n\nmodule.exports = function(source) {\n    const options = loaderUtils.getOptions(this);\n    let defaultOptions = '好帅'\n    if (options && options.q) {\n        defaultOptions = options.q\n    }\n    //这里的source 其实都是String\n    // console.log(Object.prototype.toString.call(source).slice(8,-1))\n    if (source.indexOf('wangmeng') !== -1) {\n        return source.replace(/wangmeng/g,'王猛'+defaultOptions)\n    }\n    return;\n};\n\nwebpack配置\n    module: {\n        rules: [{\n            test: /\\.js$/,\n            loader: 'some-loader?q=haohuai'\n        }]\n    }\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h2",{attrs:{id:"编写-plugin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编写-plugin","aria-hidden":"true"}},[this._v("#")]),this._v(" 编写 plugin")])},function(){var e=this.$createElement,n=this._self._c||e;return n("blockquote",[n("p",[this._v("webpack运行的生命周期会广播很多事件，Plugin会监听这些事件并在合适时机通过webpack提供的API改变输出结果")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("class BasicPlugin{\n  // 在构造函数中获取用户给该插件传入的配置\n  constructor(options){\n  }\n\n  // Webpack 会调用 BasicPlugin 实例的 apply 方法给插件实例传入 compiler 对象\n  apply(compiler){\n    compiler.plugin('compilation',function(compilation) {\n    })\n  }\n}\n\n// 导出 Plugin\nmodule.exports = BasicPlugin;\n\n\nwebpack配置\n\nconst BasicPlugin = require('./BasicPlugin.js');\nmodule.export = {\n  plugins:[\n    new BasicPlugin(options),\n  ]\n}\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"plugin工作原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#plugin工作原理","aria-hidden":"true"}},[this._v("#")]),this._v(" Plugin工作原理")])},function(){var e=this.$createElement,n=this._self._c||e;return n("ul",[n("li",[this._v("compiler 包含webpack环境所有的配置信息： options loaders plugin等，这些信息在webpack启动时被实例化，是全局唯一的， 可以理解为是webpack的实例")]),this._v(" "),n("li",[this._v("compilation 包含当前的模块资源，编译生成资源，变化的文件等，当webpack以开发模式运行时 每当检测到一个文件变化，一次新的compliation将被创建，Compilation 对象也提供了很多事件回调供插件做扩展。通过 Compilation 也能读取到 Compiler 对象。")]),this._v(" "),n("li",[this._v("区别：Compiler 代表了整个 Webpack 从启动到关闭的生命周期，而 Compilation 只是代表了一次新的编译。")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"事件流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件流","aria-hidden":"true"}},[this._v("#")]),this._v(" 事件流")])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("/**\n* 广播出事件\n*/\ncompiler.apply('event-name',params);\n\n/**\n* 监听名称为 event-name 的事件\n*/\ncompiler.plugin('event-name',function(params) {\n\n});\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"开发插件注意事项"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开发插件注意事项","aria-hidden":"true"}},[this._v("#")]),this._v(" 开发插件注意事项")])},function(){var e=this.$createElement,n=this._self._c||e;return n("ol",[n("li",[n("p",[this._v("只要能拿到 Compiler 或 Compilation 对象，就能广播出新的事件，所以在新开发的插件中也能广播出事件，给其它插件监听使用")])]),this._v(" "),n("li",[n("p",[this._v("传给每个插件的 Compiler 和 Compilation 对象都是同一个引用。也就是说在一个插件中修改了 Compiler 或 Compilation 对象上的属性，会影响到后面的插件。")])]),this._v(" "),n("li",[n("p",[this._v("有些事件是异步的，这些异步的事件会附带两个参数，第二个参数为回调函数，在插件处理完任务时需要调用回调函数通知 Webpack，才会进入下一处理流程。")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("compiler.plugin('emit',function(compilation, callback) {\n    // 支持处理逻辑\n\n    // 处理完毕后执行 callback 以通知 Webpack \n    // 如果不执行 callback，运行流程将会一直卡在这不往下执行 \n    callback();\n  });\n\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h4",{attrs:{id:"读取输出资源、代码块、模块及其依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#读取输出资源、代码块、模块及其依赖","aria-hidden":"true"}},[this._v("#")]),this._v(" 读取输出资源、代码块、模块及其依赖")])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("class Plugin {\n  apply(compiler) {\n    compiler.plugin('emit', function (compilation, callback) {\n      // compilation.chunks 存放所有代码块，是一个数组\n      compilation.chunks.forEach(function (chunk) {\n        // chunk 代表一个代码块\n        // 代码块由多个模块组成，通过 chunk.forEachModule 能读取组成代码块的每个模块\n        chunk.forEachModule(function (module) {\n          // module 代表一个模块\n          // module.fileDependencies 存放当前模块的所有依赖的文件路径，是一个数组\n          module.fileDependencies.forEach(function (filepath) {\n          });\n        });\n\n        // Webpack 会根据 Chunk 去生成输出的文件资源，每个 Chunk 都对应一个及其以上的输出文件\n        // 例如在 Chunk 中包含了 CSS 模块并且使用了 ExtractTextPlugin 时，\n        // 该 Chunk 就会生成 .js 和 .css 两个文件\n        chunk.files.forEach(function (filename) {\n          // compilation.assets 存放当前所有即将输出的资源\n          // 调用一个输出资源的 source() 方法能获取到输出资源的内容\n          let source = compilation.assets[filename].source();\n        });\n      });\n\n      // 这是一个异步事件，要记得调用 callback 通知 Webpack 本次事件监听处理结束。\n      // 如果忘记了调用 callback，Webpack 将一直卡在这里而不会往后执行。\n      callback();\n    })\n  }\n}\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h4",{attrs:{id:"监听文件变化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#监听文件变化","aria-hidden":"true"}},[this._v("#")]),this._v(" 监听文件变化")])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("// 当依赖的文件发生变化时会触发 watch-run 事件\ncompiler.plugin('watch-run', (watching, callback) => {\n    // 获取发生变化的文件列表\n    const changedFiles = watching.compiler.watchFileSystem.watcher.mtimes;\n    // changedFiles 格式为键值对，键为发生变化的文件路径。\n    if (changedFiles[filePath] !== undefined) {\n      // filePath 对应的文件发生了变化\n    }\n    callback();\n});\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("compiler.plugin('after-compile', (compilation, callback) => {\n  // 把 HTML 文件添加到文件依赖列表，好让 Webpack 去监听 HTML 模块文件，在 HTML 模版文件发生变化时重新启动一次编译\n    compilation.fileDependencies.push(filePath);\n    callback();\n});\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"修改输出资源"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改输出资源","aria-hidden":"true"}},[this._v("#")]),this._v(" 修改输出资源")])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("compiler.plugin('emit', (compilation, callback) => {\n  // 设置名称为 fileName 的输出资源\n  compilation.assets[fileName] = {\n    // 返回文件内容\n    source: () => {\n      // fileContent 既可以是代表文本文件的字符串，也可以是代表二进制文件的 Buffer\n      return fileContent;\n      },\n    // 返回文件大小\n      size: () => {\n      return Buffer.byteLength(fileContent, 'utf8');\n    }\n  };\n  callback();\n});\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("compiler.plugin('emit', (compilation, callback) => {\n  // 读取名称为 fileName 的输出资源\n  const asset = compilation.assets[fileName];\n  // 获取输出资源的内容\n  asset.source();\n  // 获取输出资源的文件大小\n  asset.size();\n  callback();\n});\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h4",{attrs:{id:"判断是否用了某插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#判断是否用了某插件","aria-hidden":"true"}},[this._v("#")]),this._v(" 判断是否用了某插件")])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("// 判断当前配置使用使用了 ExtractTextPlugin，\n// compiler 参数即为 Webpack 在 apply(compiler) 中传入的参数\nfunction hasExtractTextPlugin(compiler) {\n  // 当前配置所有使用的插件列表\n  const plugins = compiler.options.plugins;\n  // 去 plugins 中寻找有没有 ExtractTextPlugin 的实例\n  return plugins.find(plugin=>plugin.__proto__.constructor === ExtractTextPlugin) != null;\n}\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h4",{attrs:{id:"实战：开发一个插件-在webpack即将退出时附加一些操作，如包webpack成功编译和输出了文件后执行发布-上传服务器，同时该插件还能区分是否执行成功了"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实战：开发一个插件-在webpack即将退出时附加一些操作，如包webpack成功编译和输出了文件后执行发布-上传服务器，同时该插件还能区分是否执行成功了","aria-hidden":"true"}},[this._v("#")]),this._v(" 实战：开发一个插件 在webpack即将退出时附加一些操作，如包webpack成功编译和输出了文件后执行发布 上传服务器，同时该插件还能区分是否执行成功了")])},function(){var e=this.$createElement,n=this._self._c||e;return n("blockquote",[n("p",[this._v("找到合适的事件点去完成功能在开发插件时显得尤为重要")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("class EndWebpackPlugin {\n\n  constructor(doneCallback, failCallback) {\n    // 存下在构造函数中传入的回调函数\n    this.doneCallback = doneCallback;\n    this.failCallback = failCallback;\n  }\n\n  apply(compiler) {\n    compiler.plugin('done', (stats) => {\n        // 在 done 事件中回调 doneCallback\n        this.doneCallback(stats);\n    });\n    compiler.plugin('failed', (err) => {\n        // 在 failed 事件中回调 failCallback\n        this.failCallback(err);\n    });\n  }\n}\n// 导出插件 \nmodule.exports = EndWebpackPlugin;\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[n("strong",[this._v("使用")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("module.exports = {\n  plugins:[\n    // 在初始化 EndWebpackPlugin 时传入了两个参数，分别是在成功时的回调函数和失败时的回调函数；\n    new EndWebpackPlugin(() => {\n      // Webpack 构建成功，并且文件输出了后会执行到这里，在这里可以做发布文件操作\n    }, (err) => {\n      // Webpack 构建失败，err 是导致错误的原因\n      console.error(err);        \n    })\n  ]\n}\n")])])])}],!1,null,null,null);s.options.__file="webpack原理.md";n.default=s.exports}}]);