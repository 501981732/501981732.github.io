(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{216:function(n,e,t){"use strict";t.r(e);var s=t(0),r=Object(s.a)({},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"content"},[t("p",[n._v("先推荐两本书\n"),t("a",{attrs:{href:"https://github.com/chenshenhai/koajs-design-note",target:"_blank",rel:"noopener noreferrer"}},[n._v("Koa.js 设计模式-学习笔记"),t("OutboundLink")],1),n._v(" "),t("a",{attrs:{href:"https://chenshenhai.github.io/koa2-note/note/start/quick.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("koa2快速入门"),t("OutboundLink")],1)]),n._v(" "),n._m(0),n._v(" "),n._m(1),t("p",[n._v("测试：")]),n._v(" "),n._m(2),n._m(3),n._v(" "),n._m(4),t("p",[n._v("测试：")]),n._v(" "),n._m(5)])},[function(){var n=this.$createElement,e=this._self._c||n;return e("h3",{attrs:{id:"koa中间件原理解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#koa中间件原理解析","aria-hidden":"true"}},[this._v("#")]),this._v(" koa中间件原理解析")])},function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("//KOA中间件原理解析\nconst http = require('http')\n// 组合中间件\nconst compose = (middlewareList) => {\n    return function(ctx) {\n        function dispatch(i) {\n            const fn = middlewareList[i]\n            try {\n                return Promise.resolve(\n                    // next 机制\n                    // dispatch.bind(null, i + 1) 相当于 中间件中的 next  假如 await next() 则会递归执行中间件\n                    fn(ctx, dispatch.bind(null, i + 1)) // promise 经过包裹 保证返回promise对象\n                )\n            }\n            catch (err) {\n                return Promise.reject(err)\n            }\n        }\n        return dispatch(0)\n    }\n\n}\nclass Koa2Like {\n    constructor() {\n        this.middlewareList = []\n    }\n    // 注册中间件\n    use(fn) {\n        this.middlewareList.push(fn)\n        return this //链式调用\n    }\n    createCtx(req,res) {\n        const ctx = {\n            req,\n            res\n        }\n        ctx.query = req.query\n        // ...\n        return ctx\n    }\n    handleRequest(ctx, fn) {\n        return fn(ctx)\n    }\n    callback() {\n        const fn = compose(this.middlewareList)\n        return (req, res) => {\n            const ctx = this.createCtx(req, res)\n            return this.handleRequest(ctx, fn)\n        }\n    }\n    listen(...args) {\n        const server = http.createServer(this.callback())\n        server.listen(...args)\n    }\n}\n\nmodule.exports = Koa2Like\n")])])])},function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("const Koa = require('./../lib/index.js');\nconst app = new Koa();\n\n// logger\napp.use(async (ctx, next) => {\n  await next();\n  const rt = ctx['X-Response-Time'];\n  console.log(`${ctx.req.method} ${ctx.req.url} - ${rt}`);\n});\n\n// x-response-time\napp.use(async (ctx, next) => {\n  const start = Date.now();\n  await next();\n  const ms = Date.now() - start;\n  ctx['X-Response-Time'] = `${ms}ms`;\n});\n\n// response\napp.use(async ctx => {\n  ctx.res.end('This is like koa2');\n});\n\napp.listen(8000,() => console.log('listen on 8000'));\n")])])])},function(){var n=this.$createElement,e=this._self._c||n;return e("h3",{attrs:{id:"express-解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#express-解析","aria-hidden":"true"}},[this._v("#")]),this._v(" express 解析")])},function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("const http = require('http')\nconst slice = Array.prototype.slice\nclass ExpressLike {\n    constructor() {\n        // 存放各种方式中间件, 包含path和stack\n        this.routes = {\n            use: [\n                // {\n                //     path: '/',\n                //     stack: xx\n                // }\n            ],\n            get: [],\n            post: [],\n        }\n    }\n\n    register() {\n        let info = {}\n        // 第一个参数为字符串，则为局部中间件，否则为全局中间件\n        if (typeof arguments[0] === 'string') {\n            info.path = arguments[0]\n            info.stack  = slice.call(arguments,1)\n        } else {\n            info.path = '/'\n            info.stack  = slice.call(arguments,0)\n        }\n        return info\n    }\n    // 分别在各自方法中注册相应的中间件\n    //this.routes.use = [\n    //     {\n    //         path: '/',\n    //         stack: [cookieParse,checkLogin]\n    //     },\n    //     {\n    //         path: '/api',\n    //         stack: [checkLogin]\n    //     }\n    // ]\n    use() {\n        let info = this.register.apply(this, arguments)\n        this.routes.use.push(info)\n    }\n    get() {\n        let info = this.register.apply(this, arguments)\n        this.routes.get.push(info)\n    }\n    post() {\n        let info = this.register.apply(this, arguments)\n        this.routes.post.push(info)\n    }\n    // 寻找对应匹配的中间件\n    // 在相应的方法中 ，正则匹配路由 将对应路由的中间件注册进去\n    match(method, url) {\n        let stack = []\n        if (url === '/favicon.ico') {\n            return stack\n        }\n        let currentRoute = [...this.routes.use,...this.routes[method]]\n        currentRoute.forEach(info => {\n            // 应正则匹配\n            if(url.indexOf(info.path) === 0) {\n                // url='/api/blog/list' -> info.path= '/'\n                // url='/api/blog/list' -> info.path= '/api'\n                // url='/api/blog/list' -> info.path= '/api/api/blog/list'\n                stack.push(...info.stack)\n                console.log(stack)\n            }\n        })\n        // 结果就是 每个对应路由 对应一个stack的中间件\n        return stack\n    }\n    // next机制核心\n    // 假如 [cookieParser,checkLogin,handleRouter]\n    // 结合中间件写法理解\n    // handle(req, res, stack) {\n    //     const next = () => {\n    //         // 拿到第一个中间件 执行\n    //         const middleware = stack.shift()\n    //         if (middleware) {\n    //             // 传入 next中间件，使 中间件执行完毕后，递归调用自身\n    //             middleware(req, res, next)\n    //         }\n    //     }\n    //     next()\n    // }\n\n    handle(req, res, stack) {\n        const next = (err) => {\n            if (err) {\n                return this.handle500(err,req,res,stack)\n            }\n            const middleware = stack.shift()\n            if (middleware) {\n                // 传入 next中间件，使 中间件执行完毕后，递归调用自身\n                middleware(req, res, next)\n            }\n        }\n        next()\n    }\n\n    handle404(req,res) {\n        console.log(404)\n        // res.end(404)\n    }\n    // 异常处理中间件\n    handle500(err,req,res,stack) {\n        stack = stack.filter(middleware => middleware.length === 4)\n        const middleware = stack.shift()\n        if (middleware) {\n            // 传入 next中间件，使 中间件执行完毕后，递归调用自身\n            middleware(err,req, res, next)\n        }\n    }\n    // 统一处理处理\n    callback() {\n        return (req,res) => {\n            res.json = (data) => {\n                res.setHeader('Content-Type', 'application/json')\n                res.end(JSON.stringify(data))\n            }\n            const url = req.url\n            const method = req.method.toLowerCase()\n            // 当前路由对应的中间件\n            const currentStack = this.match(method, url)\n            if (currentStack.length) {\n                this.handle(req, res, currentStack)\n            } else {\n                this.handle404(req,res)\n            }\n        }\n    }\n    listen(...args) {\n        const server = http.createServer(this.callback())\n        server.listen(...args)\n    }\n}\n\n\n// 工厂 \nmodule.exports = () => {\n    return new ExpressLike()\n}\n\n")])])])},function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("const express = require('./../lib/index')\n\n// 本次 http 请求的实例\nconst app = express()\n\napp.use((req, res, next) => {\n    console.log('请求开始...', req.method, req.url)\n    next()\n})\n\napp.use((req, res, next) => {\n    // 假设在处理 cookie\n    console.log('处理 cookie ...')\n    req.cookie = {\n        userId: 'abc123'\n    }\n    next()\n})\n\napp.use('/api', (req, res, next) => {\n    console.log('处理 /api 路由')\n    next()\n})\n\napp.get('/api', (req, res, next) => {\n    console.log('get /api 路由')\n    next()\n})\n\n// 模拟登录验证\nfunction loginCheck(req, res, next) {\n    setTimeout(() => {\n        console.log('模拟登陆成功')\n        next()\n    })\n}\n\napp.get('/api/getCookie', loginCheck, (req, res, next) => {\n    console.log('get /api/getCookie')\n    res.json({\n        errno: 0,\n        data: req.cookie\n    })\n})\n\napp.listen(8000, () => {\n    console.log('server is running on port 8000')\n})\n")])])])}],!1,null,null,null);r.options.__file="koa express解析.md";e.default=r.exports}}]);