(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{206:function(e,v,_){"use strict";_.r(v);var n=_(0),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("div",{staticClass:"content"},[_("p",[e._v("http://note.youdao.com/noteshare?id=fa8f6bab2aecfc328c00e328fedb01bb")]),e._v(" "),_("h2",{attrs:{id:"大规模nodejs项目构建和优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#大规模nodejs项目构建和优化","aria-hidden":"true"}},[e._v("#")]),e._v(" 大规模nodejs项目构建和优化")]),e._v(" "),_("ol",[_("li",[e._v("java + node去掉中间不用数据")]),e._v(" "),_("li",[e._v("vue 做ssr node做")]),e._v(" "),_("li",[e._v("node 做proxy   bff backend for frontend")]),e._v(" "),_("li",[e._v("区块链用node")])]),e._v(" "),_("hr"),e._v(" "),_("p",[e._v("内容")]),e._v(" "),_("ol",[_("li",[e._v("nodejs异步io原理浅析及优化方案")]),e._v(" "),_("li",[e._v("nodejs内存管理机制及内存优化")]),e._v(" "),_("li",[e._v("大规模node站点结构原理分析")]),e._v(" "),_("li",[e._v("服务器集群管理与node集群的应用")]),e._v(" "),_("li",[e._v("UV过千万的node站点真身")])]),e._v(" "),_("hr"),e._v(" "),_("p",[e._v("异步io好处")]),e._v(" "),_("ol",[_("li",[e._v("前端通过异步io消除ui阻塞")]),e._v(" "),_("li",[e._v("同步（m+n） 异步 max(m,n)")]),e._v(" "),_("li",[e._v("随着业务的负责会引入分布式系统，扩大第二条")]),e._v(" "),_("li",[e._v("io是昂贵的，分布式io更昂贵")]),e._v(" "),_("li",[e._v("nodejs适应于io密集型不适合cpu密集型 （单线程，一个就卡死了，写法）")])]),e._v(" "),_("hr"),e._v(" "),_("p",[e._v("node对异步IO的实现")]),e._v(" "),_("p",[e._v("完美的异步IO应该是应用程序发起非阻塞调用，无需通过遍历或者时间幻想登方式轮询")]),e._v(" "),_("hr"),e._v(" "),_("p",[e._v("几个特殊API")]),e._v(" "),_("ol",[_("li",[e._v("settimeout setinterval 线程池不参与")]),e._v(" "),_("li",[e._v("process.nextTick() 实现类似settimeout(()=>{},0),每次放到队列中，下一轮循环中取出。")]),e._v(" "),_("li",[e._v("setImterval()比nextTick（）优先级低")]),e._v(" "),_("li",[e._v("node如何实现一个sleep")])]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("async function test() {\n    console.log('hello')\n    await sleep(1000)\n    console.log('world')\n    }\nfunction sleep(ms) {\n    return new Promise(resolve=>setTimeout(resolve,ms))\n}\ntest()\n\n//方法2\nfunction sleep(ms) {\n  var start = Date.now(), expire = start + ms;\n  while (Date.now() < expire) ;\n  return;\n}\n")])])]),_("hr"),e._v(" "),_("p",[e._v("常用node处理异步手段")]),e._v(" "),_("ol",[_("li",[e._v("step wind (提供等待的异步库)   bigpipe Q.js")]),e._v(" "),_("li",[e._v("Async Await")]),e._v(" "),_("li",[e._v("promise/defferred 是一种先执行异步调用，延迟传递的处理方式，Promise是高级借口，⌚事件是低级借口，低级借口可以构建更多复杂的场景，高级借口一旦定义，不太容易变化，不再有低级借口的灵活性，但对于解决问题十分有效")]),e._v(" "),_("li",[e._v("由于node基于 v8,暂时不支持协程，执行过程类似于子例程，不带返回值的函数调用")]),e._v(" "),_("li",[e._v("一个程序可以包括多个协程，    多个线程相独立，有自己的上下文，切换受系统控制，而协程也相对独立，有自己的上下文，切换由自己控制，")])]),e._v(" "),_("hr"),e._v(" "),_("p",[e._v("内存管理与优化")]),e._v(" "),_("p",[e._v("1。 V8垃圾回收机制")]),e._v(" "),_("ul",[_("li",[_("pre",[_("code",[e._v("node使用js在服务端操作大内存对象收到了一定的限制，64位系统下约1.4G 32位操作系统下0.7G\n")])])]),e._v(" "),_("li",[_("pre",[_("code",[e._v("Process.memoryUsage -> rss, heaptTotal heapUsed\n")])])]),e._v(" "),_("li",[_("pre",[_("code",[e._v("V8垃圾回收策略主要基于分代式垃圾回收机制，在自动垃圾回收的演变中，人们发现没有一中垃圾回收算法能胜任所有场景，V8中内存分位新生代和老生带两代。 新生代为存活时间较短的对象，老生代中为存活时间较长的对象\n")])]),e._v(" "),_("ul",[_("li",[e._v("新生代Scavenge算法")]),e._v(" "),_("li",[e._v("老生代 采用 Mark-Sweep（清扫）和 Mark-compact（压紧） 标记清除，然后 Mark-compact 连续")])])])]),e._v(" "),_("hr"),e._v(" "),_("p",[e._v("常见内存泄露问题")]),e._v(" "),_("ol",[_("li",[e._v("无限制增长的数组")]),e._v(" "),_("li",[e._v("无限制设置属性和值")]),e._v(" "),_("li",[e._v("任何魔抗内的私有变量和方法均是永驻内存的 a = null")]),e._v(" "),_("li",[e._v("大循环无GC机会")])]),e._v(" "),_("hr"),e._v(" "),_("p",[e._v("经典的MVC框架")]),e._v(" "),_("p",[e._v("Model-View-Controller\nmodel就是后台请求的数据")]),e._v(" "),_("hr"),e._v(" "),_("p",[e._v("node微服务")]),e._v(" "),_("hr"),e._v(" "),_("p",[e._v("上线")]),e._v(" "),_("ol",[_("li",[e._v("前端工程化的搭载动态文件的,AP分析压缩打包合并至CDN")]),e._v(" "),_("li",[e._v("单测，压测性能分析工具发现bug")]),e._v(" "),_("li",[e._v("编写 nginx-conf 实现负载均衡和反向代理 (node很少直接做server，用nginx做网络层代理，pm2做cpu的负载均衡)")]),e._v(" "),_("li",[e._v("pm2启动应用程序小流量灰度上线，修复BUG")])]),e._v(" "),_("hr"),e._v(" "),_("p",[e._v("PV过千万的node站点真身")]),e._v(" "),_("ol",[_("li",[e._v("图2")])]),e._v(" "),_("hr")])}],!1,null,null,null);o.options.__file="大规模node项目架构.md";v.default=o.exports}}]);