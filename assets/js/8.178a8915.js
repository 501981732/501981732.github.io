(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{190:function(_,t,e){"use strict";e.r(t);var n=e(0),s=Object(n.a)({},function(){var _=this,t=_.$createElement,e=_._self._c||t;return e("div",{staticClass:"content"},[_._m(0),_._v(" "),_._m(1),_._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/501981732/MySQL",target:"_blank",rel:"noopener noreferrer"}},[_._v("学习目录"),e("OutboundLink")],1)]),_._v(" "),_._m(2),_._v(" "),_._m(3),_._v(" "),_._m(4),_._v(" "),_._m(5),_._v(" "),e("hr"),_._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/501981732/MySQL",target:"_blank",rel:"noopener noreferrer"}},[_._v("学习目录"),e("OutboundLink")],1)]),_._v(" "),_._m(6),_._v(" "),_._m(7),_._v(" "),_._m(8),_._v(" "),_._m(9),_._v(" "),_._m(10),_._v(" "),_._m(11),_._v(" "),_._m(12),_._v(" "),_._m(13),_._v(" "),_._m(14),_._v(" "),_._m(15),_._v(" "),_._m(16),_._v(" "),_._m(17),_._v(" "),_._m(18),_._v(" "),e("hr"),_._v(" "),_._m(19),_._v(" "),_._m(20),_._v(" "),_._m(21),_._v(" "),_._m(22),_._v(" "),e("hr"),_._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/501981732/MySQL",target:"_blank",rel:"noopener noreferrer"}},[_._v("学习目录"),e("OutboundLink")],1)]),_._v(" "),_._m(23),_._v(" "),_._m(24),_._v(" "),_._m(25),_._v(" "),_._m(26),_._v(" "),_._m(27),_._v(" "),_._m(28),_._v(" "),_._m(29),_._v(" "),_._m(30),_._v(" "),_._m(31),_._v(" "),_._m(32),_._v(" "),_._m(33),_._v(" "),_._m(34),_._v(" "),e("hr"),_._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/501981732/MySQL",target:"_blank",rel:"noopener noreferrer"}},[_._v("学习目录"),e("OutboundLink")],1)]),_._v(" "),_._m(35),_._v(" "),_._m(36),_._v(" "),_._m(37),_._v(" "),e("hr"),_._v(" "),_._m(38),_._v(" "),_._m(39),_._v(" "),_._m(40),_._v(" "),e("hr"),_._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/501981732/MySQL",target:"_blank",rel:"noopener noreferrer"}},[_._v("学习目录"),e("OutboundLink")],1)]),_._v(" "),_._m(41),_._v(" "),_._m(42),_._v(" "),_._m(43),_._v(" "),_._m(44),_._v(" "),_._m(45),_._v(" "),_._m(46),_._v(" "),_._m(47),_._v(" "),_._m(48),_._v(" "),_._m(49),_._v(" "),_._m(50),_._v(" "),_._m(51),_._v(" "),_._m(52),_._v(" "),_._m(53),_._v(" "),_._m(54),_._v(" "),_._m(55),_._v(" "),_._m(56),_._v(" "),_._m(57),_._v(" "),_._m(58),_._v(" "),e("hr"),_._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/501981732/MySQL",target:"_blank",rel:"noopener noreferrer"}},[_._v("学习目录"),e("OutboundLink")],1)]),_._v(" "),_._m(59),_._v(" "),_._m(60),_._v(" "),_._m(61),_._v(" "),_._m(62),_._v(" "),_._m(63),_._v(" "),_._m(64),_._v(" "),e("hr"),_._v(" "),_._m(65),_._v(" "),_._m(66)])},[function(){var _=this.$createElement,t=this._self._c||_;return t("h2",{attrs:{id:"mysql从入门到放弃"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql从入门到放弃","aria-hidden":"true"}},[this._v("#")]),this._v(" MySQL从入门到放弃")])},function(){var _=this.$createElement,t=this._self._c||_;return t("h2",{attrs:{id:"_1初涉mysql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1初涉mysql","aria-hidden":"true"}},[this._v("#")]),this._v(" 1初涉mysql")])},function(){var _=this,t=_.$createElement,e=_._self._c||t;return e("ul",[e("li",[_._v("mysql默认端口 3306")]),_._v(" "),e("li",[_._v("mysql超级用户 root")]),_._v(" "),e("li",[_._v("创建数据库 CREATE DATABASES")]),_._v(" "),e("li",[_._v("修改数据库 ALTERE DATABASE")]),_._v(" "),e("li",[_._v("删除数据库 DROP DATABASE")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("ol",[t("li",[this._v("启动服务 mysql -uroot -p123456 -P3306 -h127.0.0.1（账号root密码123456）")]),this._v(" "),t("li",[this._v("SHOW DATABASES")]),this._v(" "),t("li",[this._v("use db_name")]),this._v(" "),t("li",[this._v("SELECT DATABASE() 显示当前打开的数据库")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("h2",{attrs:{id:"_2-数据类型和操作数据表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型和操作数据表","aria-hidden":"true"}},[this._v("#")]),this._v(" 2 数据类型和操作数据表")])},function(){var _=this.$createElement,t=this._self._c||_;return t("h3",{attrs:{id:"数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据类型")])},function(){var _=this.$createElement,t=this._self._c||_;return t("ul",[t("li",[t("strong",[this._v("整型")])])])},function(){var _=this,t=_.$createElement,e=_._self._c||t;return e("table",[e("thead",[e("tr",[e("th",[_._v("数据类型")]),_._v(" "),e("th",[_._v("存储范围")]),_._v(" "),e("th",[_._v("字节")])])]),_._v(" "),e("tbody",[e("tr",[e("td",[_._v("TINYINT")]),_._v(" "),e("td",[_._v("无符号值：-128到127 有符号位0-255")]),_._v(" "),e("td",[_._v("1")])]),_._v(" "),e("tr",[e("td",[_._v("SMALLINT")]),_._v(" "),e("td",[_._v("无符号值：-2^15到 2^15 有符号位0-2^16")]),_._v(" "),e("td",[_._v("2")])]),_._v(" "),e("tr",[e("td",[_._v("MEDIUMINT")]),_._v(" "),e("td",[_._v("无符号值：-2^23到 2^15 有符号位0-2^23")]),_._v(" "),e("td",[_._v("3")])]),_._v(" "),e("tr",[e("td",[_._v("INT")]),_._v(" "),e("td",[_._v("无符号值：-2^31到 2^31 有符号位0-2^32")]),_._v(" "),e("td",[_._v("4")])]),_._v(" "),e("tr",[e("td",[_._v("BIGINT")]),_._v(" "),e("td",[_._v("无符号值：-2^63到 2^63 有符号位0-2^64")]),_._v(" "),e("td",[_._v("8")])])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("p",[this._v("选择合适的类型 例如： 年龄字段（1-100多岁）用TINYINT")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("ul",[t("li",[t("strong",[this._v("浮点型")])])])},function(){var _=this,t=_.$createElement,e=_._self._c||t;return e("table",[e("thead",[e("tr",[e("th",[_._v("数据类型")]),_._v(" "),e("th",[_._v("存储范围")])])]),_._v(" "),e("tbody",[e("tr",[e("td",[_._v("FLOAT[(M,D)]")]),_._v(" "),e("td",[_._v("-3.4E+38到-3.4E-38 0和1,。175E-38到3.40E+38    M数字总数，D小数点后位数单精度浮点大概精确到7位小数位")])]),_._v(" "),e("tr",[e("td",[_._v("DOUBLE[(M,D)]")]),_._v(" "),e("td",[_._v("近十倍的单精度浮点的大小")])])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("p",[this._v("FLOAT[(7,2)]  总位数7位，小数位2位")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("ul",[t("li",[t("strong",[this._v("日期时间类型")])])])},function(){var _=this,t=_.$createElement,e=_._self._c||t;return e("table",[e("thead",[e("tr",[e("th",[_._v("列表型")]),_._v(" "),e("th",[_._v("存储需求")])])]),_._v(" "),e("tbody",[e("tr",[e("td",[_._v("YEAR")]),_._v(" "),e("td",[_._v("1")])]),_._v(" "),e("tr",[e("td",[_._v("TIME")]),_._v(" "),e("td",[_._v("3")])]),_._v(" "),e("tr",[e("td",[_._v("DATE")]),_._v(" "),e("td",[_._v("3")])]),_._v(" "),e("tr",[e("td",[_._v("DATETIME")]),_._v(" "),e("td",[_._v("8")])]),_._v(" "),e("tr",[e("td",[_._v("TIMESTAM")]),_._v(" "),e("td",[_._v("4")])])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("pre",[t("code",[this._v("> DATE  1000年1月1号 9999年12月31号\n\n> DATE  1000年1月1号0点 9999年12月31号23点59分59秒\n\n> TIMESTAM 时间戳  1970年1月1号0点 2037年的一个值\n\n>实际开发中用数字类型取代（用php加密），由于跨时区问题\n")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("ul",[t("li",[t("strong",[this._v("字符型")])])])},function(){var _=this,t=_.$createElement,e=_._self._c||t;return e("table",[e("thead",[e("tr",[e("th",[_._v("列表型")]),_._v(" "),e("th",[_._v("存储需求")])])]),_._v(" "),e("tbody",[e("tr",[e("td",[_._v("CHAR(M)")]),_._v(" "),e("td",[_._v("M个字节   0<=M<=255")])]),_._v(" "),e("tr",[e("td",[_._v("VARCHAR(M)")]),_._v(" "),e("td",[_._v("L+1个字节   L<=M 且   0<=M<=65535")])]),_._v(" "),e("tr",[e("td",[_._v("TINYTEXT")]),_._v(" "),e("td",[_._v("L+1个字节   L< 2^8")])]),_._v(" "),e("tr",[e("td",[_._v("TEXT")]),_._v(" "),e("td",[_._v("L+2个字节   L< 2^16")])]),_._v(" "),e("tr",[e("td",[_._v("MEDIUMTEXT")]),_._v(" "),e("td",[_._v("L+3个字节   L< 2^24")])]),_._v(" "),e("tr",[e("td",[_._v("ENUM('value','value')")]),_._v(" "),e("td")]),_._v(" "),e("tr",[e("td",[_._v("SET('value','value')")]),_._v(" "),e("td")])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("ul",[t("li",[this._v("行--记录 列--字段")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("h3",{attrs:{id:"数据表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据表","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据表")])},function(){var _=this.$createElement,t=this._self._c||_;return t("ul",[t("li",[t("p",[t("strong",[this._v("创建数据表")])]),this._v(" "),t("ul",[t("li",[this._v("数据表（或称呼表）是数据库最重要的组成部分之一，是其他对象的基础")]),this._v(" "),t("li",[this._v("行--记录 列--字段")])])])])},function(){var _=this,t=_.$createElement,e=_._self._c||t;return e("ol",[e("li",[e("strong",[_._v("USE")]),_._v(" 数据库名称")]),_._v(" "),e("li",[e("strong",[_._v("SHOW DATABASE")]),_._v("  展示数据库")]),_._v(" "),e("li",[e("strong",[_._v("SELECT DATABASE")]),_._v(" 打开数据库")]),_._v(" "),e("li",[e("strong",[_._v("CREATE TABLE [IF NOT EXISTS] table_name(colunm_name data_type,...)")]),_._v(" 创建数据库\n"),e("ul",[e("li",[_._v("eg： CREATE TABLE IF NOT EXISTS demo_name( id int,username VARCHAR(20), age TINYINT UNSIGNED,salary FLOAT(8,2) UNSIGNED)  无符号位")]),_._v(" "),e("li",[e("strong",[_._v("NULL")]),_._v(" ,字段可为空  "),e("strong",[_._v("NOT NULL")]),_._v(" ,字段可为空\n"),e("ul",[e("li",[_._v("eg： CREATE TABLE IF NOT EXISTS demo_name( id int,username VARCHAR(20) NOT NULL,salary FLOAT(8,2) UNSIGNED NULL)")])])]),_._v(" "),e("li",[e("strong",[_._v("AUTO_INCREMENT")]),_._v(" 自动编号，必须和主键结合使用，默认起始为1，每次增1")]),_._v(" "),e("li",[e("strong",[_._v("主键")]),_._v(" 每张表只能存在一个，保证记录的唯一性，主键自动为NOT NULL")]),_._v(" "),e("li",[e("strong",[_._v("唯一约束  UNIQUE KEY")]),_._v(" 也可以保证记录唯一性，可以为NULL 每张表可以存在多个唯一约束")]),_._v(" "),e("li",[e("strong",[_._v("默认约束 DEFAULT")]),_._v(" 若没有明确某字段赋值， 则自动赋值默认值")])])])])},function(){var _=this,t=_.$createElement,e=_._self._c||t;return e("ul",[e("li",[e("p",[e("strong",[_._v("查看数据表")])]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("SHOW TABLES [FROM db_name] [LIKE `PATTERN` | WHERE expr")]),_._v("]查看某数据库中的数据表 当前数据库不会改变")]),_._v(" "),e("li",[e("strong",[_._v("SHOW COLUMNS FROM tal_name")]),_._v(" 查看数据表结构")])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("插入与查找")])]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("INSERT [INTO] tab_name [(col_name,...)] VALUES(val,...)")]),_._v(" 插入列名的情况下必须全部赋值")]),_._v(" "),e("li",[e("strong",[_._v("SELECT expr,... FROM  tab_name")]),_._v(" 查找\n"),e("ul",[e("li",[_._v("SELECT * FROM tab_name")])])])])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("h2",{attrs:{id:"_3-约束"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-约束","aria-hidden":"true"}},[this._v("#")]),this._v(" 3. 约束")])},function(){var _=this,t=_.$createElement,e=_._self._c||t;return e("ul",[e("li",[_._v("约束保证数据的完整行和一致性")]),_._v(" "),e("li",[_._v("约束按数据列的数目划分：\n"),e("ul",[e("li",[_._v("表级约束")]),_._v(" "),e("li",[_._v("列级约束")])])]),_._v(" "),e("li",[_._v("约束按功能划分：\n"),e("ul",[e("li",[e("strong",[_._v("NOT NULL")]),_._v(" 非空约束")]),_._v(" "),e("li",[e("strong",[_._v("PRIMARY KEY")]),_._v(" 主键约束")]),_._v(" "),e("li",[e("strong",[_._v("UNIQUE KEY")]),_._v(" 唯一约束")]),_._v(" "),e("li",[e("strong",[_._v("DEFAULT")]),_._v(" 默认约束")]),_._v(" "),e("li",[e("strong",[_._v("FOREIGN KEY")]),_._v(" 外键约束")])])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("ul",[t("li",[t("h3",{attrs:{id:"外键约束foreign-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#外键约束foreign-key","aria-hidden":"true"}},[this._v("#")]),this._v(" 外键约束FOREIGN KEY")])])])])},function(){var _=this,t=_.$createElement,e=_._self._c||t;return e("ul",[e("li",[_._v("外键约束 保证数据一致性，完整性，实现一对一，一对多的关系")]),_._v(" "),e("li",[_._v("外键约束的要求：\n"),e("ol",[e("li",[_._v("父表和子表必须使用相同的存储引擎，而且尽职使用临时表\n"),e("ul",[e("li",[_._v("具有外键列的表为"),e("em",[_._v("子表")]),_._v("，子表所参照的表为"),e("em",[_._v("父表")])]),_._v(" "),e("li",[_._v("编辑数据表的默认存储引擎 MySQL配置文件 default-storage-engine=INNODB")])])]),_._v(" "),e("li",[_._v("数据表的存储引擎只能为InnoDB")]),_._v(" "),e("li",[_._v("外键列和参照列必须具有相似的数据类型，其中数字的长度或是否有符号必须相同；而字符的长度则可以不同\n"),e("ul",[e("li",[_._v("具有FOREIGN KEY 的那一列为"),e("em",[_._v("外键列")]),_._v("，它所参照的那一列为"),e("em",[_._v("参照列")])])])]),_._v(" "),e("li",[_._v("外键列和参照列必须创建索引。如果外键列不存在索引的话，MySQL将自动创建索引\n"),e("ul",[e("li",[_._v("参照列没有索引，MySQL才会自动创建，外键列没有的话不会")])])])])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("p",[this._v("省份表")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("CREATE TABLE PROVINCES(\n`id` SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,\npname VARCHAR(20) NOT NULL)\n")])])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("p",[this._v("users表")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("CREATE TABLE USERS(\n`id` SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,\nusername VARCHAR(20) NOT NULL，\npid SNALLINT UNSIGNED，\nFOREIGN KEY(pid) REFERENCES privinces (id) )\n")])])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("ul",[t("li",[this._v("关系型数据库，用户表中想存储省份，不用存省份，用省份id， 这里的id就是外键")]),this._v(" "),t("li",[this._v("有外键的表users成为子表，参照的表provinces为父表")]),this._v(" "),t("li",[this._v("外键pid参照 privinces表中的id，两者必须具有相似的数据类型，其中数字的长度或是否有符号必须相同；而字符的长度则可以不同")]),this._v(" "),t("li")])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("ul",[t("li",[t("h3",{attrs:{id:"外键约束的参照操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#外键约束的参照操作","aria-hidden":"true"}},[this._v("#")]),this._v(" 外键约束的参照操作")])])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("ul",[t("li",[this._v("表关联之后，父表更新，子表是否更新的操作")]),this._v(" "),t("li",[this._v("实际开发中不去定义物理的外键，而是逻辑的外键（使用某种结构而不是FOREIGN KEY这个关键字）")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("ol",[t("li",[this._v("CASCADE： 从父表删除或更新且自动删除，或个鞥新子表中匹配的行")]),this._v(" "),t("li",[this._v("SET NULL：从父表删除或更新行，并设置子表中的外键列为NULL。如果使用该选项，必须保证子表列没有指定NOT NULL")]),this._v(" "),t("li",[this._v("RESTRICT: 拒绝对父表的删除或更新操作")]),this._v(" "),t("li",[this._v("NO ACTION: 标准SQL的关键字，在MySQL中与RESTRICT相同")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("h2",{attrs:{id:"_4-修改数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-修改数据结构","aria-hidden":"true"}},[this._v("#")]),this._v(" 4.修改数据结构")])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("p",[this._v("数据表的修改操作：无非就是添加列（ADD），删除列(DROP)，添加约束（ADD），删除约束(DROP)。用的是ALTER，而INSERT是对数据表添加插入记录用的。")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("p",[this._v("修改数据表：")]),this._v(" "),t("ul",[t("li",[this._v("针对字段：添加/删除字段，修改列定义，修改列名称等")]),this._v(" "),t("li",[this._v("针对约束：添加/删除各种约束")]),this._v(" "),t("li",[this._v("针对数据表：数据表的更名(两种)")])])])},function(){var _=this,t=_.$createElement,e=_._self._c||t;return e("ul",[e("li",[_._v("添加单列\n"),e("ul",[e("li",[e("strong",[_._v("ALTER TABLE")]),_._v(" tbl_name "),e("strong",[_._v("ADD")]),_._v(" [COLUMN] col_name column_definition [FIRST | AFTER col_name]")])])]),_._v(" "),e("li",[_._v("添加多列\n"),e("ul",[e("li",[_._v("ALTER TABLE tbl_name ADD [COLUMN] (col_name column_definition,...)")])])]),_._v(" "),e("li",[_._v("删除列\n"),e("ul",[e("li",[_._v("ALTER TABLE tbl_name DROP [COLUMN] col_name")])])]),_._v(" "),e("li",[_._v("添加/删除主键约束\n"),e("ul",[e("li",[_._v("添加 ALTER TABLE tbl_name ADD [CONSTRAINT[symbol]] PRIMARY KEY [index_type] (index_col_name,...)")]),_._v(" "),e("li",[_._v("删除 ALTER TABLE tbl_name DROP PRIMARY KEY")])])]),_._v(" "),e("li",[_._v("添加/删除唯一约束\n"),e("ul",[e("li",[_._v("添加 ALTER TABLE tbl_name ADD [CONSTRAINT[symbol]] UNIQUE [INDEX|KEY] [index_name] [index_type] (index_col_name,...)")]),_._v(" "),e("li",[_._v("删除 ALTER TABLE tbl_name DROP {INDEX|KEY} index_name")])])]),_._v(" "),e("li",[_._v("添加外键约束\n"),e("ul",[e("li",[_._v("添加ALTER TABLE tbl_name ADD [CONSTRAINT[symbol]] FOREIGN KEY [index_name] (index_col_name,...) reference_definition")]),_._v(" "),e("li",[_._v("删除 ALTERE TABLE tab_name DROP FOREIGN KEY fk_symbol")])])]),_._v(" "),e("li",[_._v("添加/删除默认约束\n"),e("ul",[e("li",[_._v("ALTER TABLE tbl_name ALTER [COLUMN] col_name {SET DEFAULT literal | DROP DEFAULT}\n"),e("ul",[e("li",[_._v("添加：ALTER TABLE users2 ALTER age SET DEFAULT 15;")]),_._v(" "),e("li",[_._v("删除：ALTER TABLE users2 ALTER age DROP DEFAULT;")])])])])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("h3",{attrs:{id:"修改列定义和更名数据表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改列定义和更名数据表","aria-hidden":"true"}},[this._v("#")]),this._v(" 修改列定义和更名数据表")])},function(){var _=this,t=_.$createElement,e=_._self._c||t;return e("ul",[e("li",[_._v("修改列定义 "),e("strong",[_._v("MODIFY")]),_._v(" "),e("ul",[e("li",[_._v("ALTER TABLE tbl_name "),e("strong",[_._v("MODIFY")]),_._v(" [COLUMN] col_name column_definition [FIRST| ATTERE col_name]\n"),e("ul",[e("li",[_._v("ALTER TABLE users MODIFY id SMALLINT UNSIGNED NOT NULL FIRST")])])])])]),_._v(" "),e("li",[_._v("修改列名称 "),e("strong",[_._v("CHANGE")]),_._v(" "),e("ul",[e("li",[_._v("ALTER TABLE tbl_name "),e("strong",[_._v("CHANGE")]),_._v(" [COLUMN] old_col_name new_col_name column_definition [FIRST| ATTERE col_name]\n"),e("ul",[e("li",[_._v("ALTER TABLE users CHANGE id ID SMALLINT UNSIGNED NOT NULL FIRST")])])])])]),_._v(" "),e("li",[_._v("修改数据表名称 "),e("strong",[_._v("RENAME")]),_._v(" "),e("ol",[e("li",[_._v("ALTER TABLE tbl_name RENAME [TO|AS] new_tbl_name")]),_._v(" "),e("li",[_._v("RENAME TABLE tbl_name TO new_tbl_name [,tbl_name2 TO new_tbl_name2]")])])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("h2",{attrs:{id:"_5-操作数据表中的记录（增删改查）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-操作数据表中的记录（增删改查）","aria-hidden":"true"}},[this._v("#")]),this._v(" 5.操作数据表中的记录（增删改查）")])},function(){var _=this,t=_.$createElement,e=_._self._c||t;return e("ul",[e("li",[e("p",[_._v("增")])]),_._v(" "),e("li",[e("p",[_._v("删")])]),_._v(" "),e("li",[e("p",[_._v("改")])]),_._v(" "),e("li",[e("p",[_._v("查")])]),_._v(" "),e("li",[e("h3",{attrs:{id:"插入-insert"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#插入-insert","aria-hidden":"true"}},[_._v("#")]),_._v(" 插入 INSERT")]),_._v(" "),e("ul",[e("li",[e("p",[e("strong",[_._v("INSERT")]),_._v(" [INTO] tbl_name [(col_name,...)] {"),e("strong",[_._v("VALUES | VALUE")]),_._v("} ({expr | DEFAULT},...),(...)...")]),_._v(" "),e("ol",[e("li",[e("p",[_._v("省略col_name则表示要插入所有字段,所有字段都要赋值否则报错")])]),_._v(" "),e("li",[e("p",[_._v("为自增的字段赋值可用NULL/DEFAULT，他仍遵守递增的规则，此外为有默认值的项赋值DEFAULT代表默认值")])]),_._v(" "),e("li",[e("p",[_._v("所赋值可以为表达式")])]),_._v(" "),e("li",[e("p",[_._v("插入id，name，password,score")]),_._v(" "),e("blockquote"),_._v(" "),e("pre",[e("code",[_._v(" INSERT users_table VALUES(NULL,'wm',123456,DEFAULT)\n")])]),_._v(" "),e("blockquote"),_._v(" "),e("pre",[e("code",[_._v(" INSERT users_table VALUES(NULL,'wm',123456，DEFAULT),VALUES(3*7,'wm',md('123'),DEFAULT)\n")])])])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("INSERT")]),_._v(" [INTO] tbl_name "),e("strong",[_._v("SET")]),_._v(" col_name={expr | DEFAULT},...("),e("em",[_._v("此方法与第一种方法的区别在于可以使用子查询SubQuery，且只能插入一条数据")]),_._v(")")]),_._v(" "),e("blockquote"),_._v(" "),e("p",[e("strong",[_._v("INSERT")]),_._v(" users SET username='wm',password='123'")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("INSERT")]),_._v(" [INTO] tbl_name [(col_name,...)] "),e("strong",[_._v("SELECT")]),_._v(" ...("),e("em",[_._v("将查询结果写入到指定数据表中")]),_._v(")")]),_._v(" "),e("blockquote"),_._v(" "),e("pre",[e("code",[_._v("将 user_table 中age大于30的数据中的username写入到test_table表(只有一列)\n")])]),_._v(" "),e("p",[e("s",[_._v("INSERT test SELECT username WHERE age>=30")])]),_._v(" "),e("pre",[e("code",[_._v("INSERT test(username) SELECT username WHERE age>=30\n")])])])])]),_._v(" "),e("li",[e("h3",{attrs:{id:"单张表更新-update"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单张表更新-update","aria-hidden":"true"}},[_._v("#")]),_._v(" 单张表更新 UPDATE")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("UPDATE")]),_._v(" [LOW_PRIORITY] [IGNORE] table_reference "),e("strong",[_._v("SET")]),_._v(" col_name1={expr1 | DEFAULT} [,col_name2={expr1 | DEFAULT}] ... [WHERE where_condition] ("),e("strong",[_._v("单张表更新")]),_._v(")")])]),_._v(" "),e("blockquote"),_._v(" "),e("pre",[e("code",[_._v("  UPDATE user_table SET age = age + 5 WHERE id % 2 = 0 (偶数位id age加5)\n")])])]),_._v(" "),e("li",[e("h3",{attrs:{id:"单张表删除-delete"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单张表删除-delete","aria-hidden":"true"}},[_._v("#")]),_._v(" 单张表删除 DELETE")]),_._v(" "),e("ul",[e("li",[_._v("DELETE FROM tbl_name [WHERE where_condition] ("),e("strong",[_._v("单张表删除")]),_._v(")")])]),_._v(" "),e("blockquote"),_._v(" "),e("pre",[e("code",[_._v("  DELETE FROM user_table WHERE id = 6\n")])])]),_._v(" "),e("li",[e("h3",{attrs:{id:"查找-select"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查找-select","aria-hidden":"true"}},[_._v("#")]),_._v(" 查找 SELECT")]),_._v(" "),e("ul",[e("li",[_._v("SELECT select_expr [,select_expr...]")]),_._v(" "),e("li",[_._v("[FROM tab_references")]),_._v(" "),e("li",[_._v("[WHERE where_condition]")]),_._v(" "),e("li",[_._v("[GROUP BY {col_name | position }[ASC| DESC],...]")]),_._v(" "),e("li",[_._v("[HAVING where_condition]")]),_._v(" "),e("li",[_._v("[ORDER BY {col_name | expr | position} [ASC | DESC],...]")]),_._v(" "),e("li",[_._v("[LIMIT {[offset,] row_count | row_count FOOSET offset}]"),e("br"),_._v("\n]")]),_._v(" "),e("li",[_._v("select_expr: 查询表达式\n"),e("ul",[e("li",[_._v("每一个表达式表示想要的一列，必须有至少一个")]),_._v(" "),e("li",[_._v("多个列用英文逗号隔开")]),_._v(" "),e("li",[_._v("型号（ * ）表示所有列，tbl_name.* 可以表示命名表的所有列")]),_._v(" "),e("li",[_._v("查询表达式可以使用[AS] alias_name 为其赋予别名")]),_._v(" "),e("li",[_._v("别名可用于 GROUP BY ，ORDER BY 或HAVING子句")]),_._v(" "),e("li",[_._v("select字段顺序可影响到查找结果出现的顺序，别名也一样会影响")])])])]),_._v(" "),e("blockquote"),_._v(" "),e("pre",[e("code",[_._v("  SELECT id AD user_id, username AS u_name FROM user_table \n")])]),_._v(" "),e("p",[e("strong",[_._v("分页:")])]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("LIMIT 子句可以被用于强制 SELECT 语句返回指定的记录数。LIMIT 接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。初始记录行的偏移量是 0(而不是 1\n获取前五条数据：\nSELECT customernumber, customername, creditlimit FROM customers LIMIT 5;\nSELECT customernumber, customername, creditlimit FROM customers LIMIT 0,5;\n\n\n")])])]),e("hr")]),_._v(" "),e("li",[e("h3",{attrs:{id:"where"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#where","aria-hidden":"true"}},[_._v("#")]),_._v(" WHERE")])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("p",[this._v("[WHERE where_condition]")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("p",[this._v("对记录过滤，如果没有指定WHERE子句，则显示所有记录")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("p",[this._v("在WHERE表达式中，可以使用MySQL支持的函数或表达式")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("ul",[t("li",[t("h3",{attrs:{id:"group-by"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#group-by","aria-hidden":"true"}},[this._v("#")]),this._v(" GROUP BY")])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("p",[this._v("查询结果分组\n[GROUP BY {col_name | position }[ASC| DESC],...]")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("pre",[t("code",[this._v("SELECT sex FROM user_table GROUP BY sex (*对性别进行分组*)\n")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("ul",[t("li",[t("h3",{attrs:{id:"having"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#having","aria-hidden":"true"}},[this._v("#")]),this._v(" HAVING")])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("p",[this._v("[HAVING where_condition] 分组条件 对某一部分进行分组")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("p",[t("s",[this._v("SELECT sex FROM GROUP BY sex HAVING age > 35")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("pre",[t("code",[this._v("SELECT sex,age FROM user_table GROUP BY sex HAVING age > 35 (*用时必须在select查找字段内中出现*)    \nSELECT sex FROM FROM user_table GROUP BY sex HAVING count(id) > 2 (*或者聚合函数最大值，最小值等，因为只会出现一个值*)\n")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("ul",[t("li",[t("h3",{attrs:{id:"order-by"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#order-by","aria-hidden":"true"}},[this._v("#")]),this._v(" ORDER BY")])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("p",[this._v("[ORDER BY {col_name | expr | position} [ASC | DESC],...]")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("pre",[t("code",[this._v("SELECT * FROM user_table ORDERBY id DESC (*降序*) \nSELECT * FROM user_table ORDERBY age id DESC (*按着age降序排列，当age相同时这些相同的数据再按着id降序排列*) \n")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("ul",[t("li",[t("h3",{attrs:{id:"limit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#limit","aria-hidden":"true"}},[this._v("#")]),this._v(" LIMIT")])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("p",[this._v("[LIMIT {[offset,] row_count | row_count FOOSET offset}] 限制查询数量")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("pre",[t("code",[this._v("SELECT * FROM user_table LIMIT 10 (从第一条数据开始返回，一共10条)\nSELECT * FROM user_table LIMIT 2,2 (返回第3,4条，数据从第0开始，从第2+1条开始，返回两条) \n")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("h2",{attrs:{id:"_6-子查询与连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-子查询与连接","aria-hidden":"true"}},[this._v("#")]),this._v(" 6.子查询与连接")])},function(){var _=this,t=_.$createElement,e=_._self._c||t;return e("ol",[e("li",[_._v("启动服务 mysql -uroot -p123456 -P3306 -h127.0.0.1（账号root密码123456）")]),_._v(" "),e("li",[_._v("SHOW DATABASES 查看数据库")]),_._v(" "),e("li",[_._v("use db_name 选中数据库")]),_._v(" "),e("li",[_._v("SELECT DATABASE() 显示当前打开的数据库")]),_._v(" "),e("li",[_._v("SHOW TABLES 查看当前数据库下的数据表")]),_._v(" "),e("li",[_._v("SHOW COLUMNS FROM tbl_name 查看数据表详情")]),_._v(" "),e("li",[_._v("SELECT * FROM tbl_name \\G: 在命令行中以网格形式呈现")]),_._v(" "),e("li",[_._v("SET NAMES gbk  命令行中显示中文")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("h2",{attrs:{id:"子查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#子查询","aria-hidden":"true"}},[this._v("#")]),this._v(" "),t("strong",[this._v("子查询")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("ul",[t("li",[this._v("子查询：是指在另一个查询语句中的SELECT子句")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("p",[this._v("SELECT * FROM t1 WHERE column1 = (SELECT column1 FROM t2);其中，SELECT * FROM t1 ...称为Outer Query[外查询](或者Outer Statement),\nSELECT column1 FROM t2 称为Sub Query[子查询]。\n所以，我们说子查询是嵌套在外查询内部。而事实上它有可能在子查询内部再嵌套子查询。\n子查询必须出现在圆括号之间。")])])},function(){var _=this.$createElement,t=this._self._c||_;return t("blockquote",[t("p",[this._v("子查询可以返回标量，一行，一列，或者子查询")])])},function(){var _=this,t=_.$createElement,e=_._self._c||t;return e("ul",[e("li",[e("p",[e("strong",[_._v("由比较运算符引发的子查询")])]),_._v(" "),e("ol",[e("li",[_._v("= > <  >=  <= != <=>")]),_._v(" "),e("li",[_._v("语法结构 operand comparison_operator  ANY 或SOME或 ALL(subquery)")]),_._v(" "),e("li",[_._v("求平均值，并保留两位小数 "),e("strong",[_._v("SELECT ROUND(AVG(price),2) FROM tbl_name")])]),_._v(" "),e("li",[_._v("求小于平均值的商品 "),e("strong",[_._v("SELECT * FROM tbl_name WHERE price <= (SELECT ROUND(AVG(price),2) FROM tbl_name)")])]),_._v(" "),e("li",[_._v("若子查询返回多个结果的情况下，可以使用ANY SOME ALL修饰")])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("由[NOT] IN引发的子查询")])]),_._v(" "),e("ol",[e("li",[_._v("语法结构  operand comparison_operator  [NOT] IN (subquery)")]),_._v(" "),e("li",[_._v("= ANY 与IN 等效")]),_._v(" "),e("li",[_._v("!=ALL 或<>ALL 与NOT IN 等效")])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("由[NOT] IESISTS引发的子查询")])]),_._v(" "),e("ol",[e("li",[_._v("如果子查询返回任何行，EXISTS 返回TRUE； 否则FALSE")])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("使用INSERT ... SELECT 将查询的结果插入记录")])]),_._v(" "),e("ol",[e("li",[_._v("某表中商品种类保存的是中文名称，查看该商品表中一共有多少种商品（GROUP BY） "),e("strong",[_._v("SELECT goods_cate FROM tbl_name GROUP BY goods_cate")])]),_._v(" "),e("li",[_._v("将某个表中查询的结果插入到另一张表（保存商品表种类）"),e("strong",[_._v("INSERET tbl_goods_table(cate_name) SELECT goods_cate FROM tbl_name GROUP BY goods_cate")])])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("多表更新")])]),_._v(" "),e("ul",[e("li",[_._v("UPDATA table_references SET col_name1=(expr|DEFAULT) [, col_name2=(expr|DEFAULT)] [WHERE where_condition]")])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("连接")])])]),_._v(" "),e("li",[e("p",[_._v("table_reference {[INNER | CROSS] JOIN | {LEFT|RIGHT} [OUTER] JOIN} table_reference ON XX==xx SET XX=XX")]),_._v(" "),e("ul",[e("li",[_._v("INNER JOIN,内连接    在MySQL中，JOIN,CROSS JOIN 和INNER JOIN是等价的")]),_._v(" "),e("li",[_._v("LEFT [OUTER] JOIN,左外连接")]),_._v(" "),e("li",[_._v("RIGHT [OUTER] JOIN,右外连接")])])]),_._v(" "),e("li",[e("p",[_._v("数据表参照")]),_._v(" "),e("ul",[e("li",[_._v("数据表可以使用tbl_name AS alisa_name或者tbl_name alias_name")])])]),_._v(" "),e("li",[e("p",[_._v("内连接")]),_._v(" "),e("ul",[e("li",[_._v("INNER JOIN 使用OM关键字来设定连接条件，也可以使用WHERE来代替")]),_._v(" "),e("li",[_._v("使用ON设定连接条件，WHERE来进行结果集记录的过滤")]),_._v(" "),e("li",[_._v("仅显示连接条件的记录")])])]),_._v(" "),e("li",[e("p",[_._v("外连接")]),_._v(" "),e("ul",[e("li",[_._v("显示坐标中的全部和由表中符合连接条件的记录")])])]),_._v(" "),e("li",[e("p",[_._v("多表链接")]),_._v(" "),e("ul",[e("li",[_._v("操作相同")])])]),_._v(" "),e("li",[e("p",[_._v("无限分类的数据表设计")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("CREATE TABLE tdb_goods_types(\n type_id   SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,\n type_name VARCHAR(20) NOT NULL,\n parent_id SMALLINT UNSIGNED NOT NULL DEFAULT 0\n); \n\n")])])])]),_._v(" "),e("li",[e("p",[_._v("多表删除")]),_._v(" "),e("ul",[e("li",[_._v("DELETE tbl_name[."),e("em",[_._v("] [,tbl_name[.")]),_._v("]] ... FROM table_references [WHERE where_condition]")])])])])},function(){var _=this.$createElement,t=this._self._c||_;return t("h2",{attrs:{id:"下面是一个比较完整的例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#下面是一个比较完整的例子","aria-hidden":"true"}},[this._v("#")]),this._v(" 下面是一个比较完整的例子")])},function(){var _=this.$createElement,t=this._self._c||_;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("  -- 1.创建数据表\n\n  CREATE TABLE IF NOT EXISTS tdb_goods(\n    goods_id    SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,\n    goods_name  VARCHAR(150) NOT NULL,\n    goods_cate  VARCHAR(40)  NOT NULL,\n    brand_name  VARCHAR(40)  NOT NULL,\n    goods_price DECIMAL(15,3) UNSIGNED NOT NULL DEFAULT 0,\n    is_show     BOOLEAN NOT NULL DEFAULT 1,\n    is_saleoff  BOOLEAN NOT NULL DEFAULT 0\n  );\n  --2.插入部分数据\n    INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('R510VC 15.6英寸笔记本','笔记本','华硕','3399',DEFAULT,DEFAULT);\n \n    INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('Y400N 14.0英寸笔记本电脑','笔记本','联想','4899',DEFAULT,DEFAULT);\n \n    INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('G150TH 15.6英寸游戏本','游戏本','雷神','8499',DEFAULT,DEFAULT);\n    \n    INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('X550CC 15.6英寸笔记本','笔记本','华硕','2799',DEFAULT,DEFAULT);\n \n    INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('X240(20ALA0EYCD) 12.5英寸超极本','超级本','联想','4999',DEFAULT,DEFAULT);\n \n    INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('U330P 13.3英寸超极本','超级本','联想','4299',DEFAULT,DEFAULT);\n \n    INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('SVP13226SCB 13.3英寸触控超极本','超级本','索尼','7999',DEFAULT,DEFAULT);\n \n    INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('iPad mini MD531CH/A 7.9英寸平板电脑','平板电脑','苹果','1998',DEFAULT,DEFAULT);\n \n    INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('iPad Air MD788CH/A 9.7英寸平板电脑 （16G WiFi版）','平板电脑','苹果','3388',DEFAULT,DEFAULT);\n \n    INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES(' iPad mini ME279CH/A 配备 Retina 显示屏 7.9英寸平板电脑 （16G WiFi版）','平板电脑','苹果','2788',DEFAULT,DEFAULT);\n    \n-- 3.求所有电脑产品的平均价格,并且保留两位小数，AVG,MAX,MIN、COUNT、SUM为聚合函数\n\n   SELECT ROUND(AVG(goods_price),2) AS avg_price FROM tdb_goods;\n\n-- 4.查询所有价格大于平均价格的商品，并且按价格降序排序\n\n   SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price > 5845.10 ORDER BY goods_price DESC;\n  \n-- 5.使用子查询来实现\n\n  SELECT goods_id,goods_name,goods_price FROM tdb_goods \n\n\n  WHERE goods_price > (SELECT ROUND(AVG(goods_price),2) AS avg_price FROM tdb_goods) \n\n\n  ORDER BY goods_price DESC;\n\n\n-- 6.查询类型为“超记本”的商品价格\n\n \n   SELECT goods_price FROM tdb_goods WHERE goods_cate = '超级本';\n\n-- 7.查询价格大于或等于\"超级本\"价格的商品，并且按价格降序排列\n\n \n   SELECT goods_id,goods_name,goods_price FROM tdb_goods \n\n   WHERE goods_price = ANY(SELECT goods_price FROM tdb_goods WHERE goods_cate = '超级本')\n\n   ORDER BY goods_price DESC;\n   \n    -- = ANY 或 = SOME 等价于 IN \n\n   SELECT goods_id,goods_name,goods_price FROM tdb_goods \n\n   WHERE goods_price IN (SELECT goods_price FROM tdb_goods WHERE goods_cate = '超级本')\n\n   ORDER BY goods_price DESC; \n\n\n        -- 8.创建“商品分类”表\n        \n          CREATE TABLE IF NOT EXISTS tdb_goods_cates(\n        \n            cate_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,\n            \n            cate_name VARCHAR(40)\n        \n          );\n        \n        -- 9.查询tdb_goods表的所有记录，并且按\"类别\"分组\n        \n           SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;\n        \n        -- 10.将分组结果写入到tdb_goods_cates数据表\n        \n           INSERT tdb_goods_cates (cate_name) SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;\n\n        -- 11.通过tdb_goods_cates数据表来更新tdb_goods表（连接）多表更新\n        \n            ---!!!\n        \n           UPDATE tdb_goods INNER JOIN tdb_goods_cates ON goods_cate = cate_name \n        \n           SET goods_cate = cate_id ;\n           \n           ---!!!\n\n-- 12.通过CREATE...SELECT来创建数据表并且同时写入记录 多表更新一步到位！\n \n  -- SELECT brand_name FROM tdb_goods GROUP BY brand_name;\n\n  CREATE TABLE tdb_goods_brands (\n\n    brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,\n\n    brand_name VARCHAR(40) NOT NULL\n\n  ) SELECT brand_name FROM tdb_goods GROUP BY brand_name;\n\n\n-- 13.通过tdb_goods_brands数据表来更新tdb_goods数据表(错误) 系统不清楚brand_name是哪个表的\n\n  UPDATE tdb_goods  INNER JOIN tdb_goods_brands ON brand_name = brand_name\n\n  SET brand_name = brand_id;\n\n  -- Column 'brand_name' in field list is ambigous\n\n  -- 正确\n\n          UPDATE tdb_goods AS  g  INNER JOIN tdb_goods_brands AS b ON g.brand_name = b.brand_name\n        \n          SET g.brand_name = b.brand_id;\n\n-- 14.查看tdb_goods的数据表结构\n\n  DESC tdb_goods; / SHOW COLUMNS FROM tdb_goods\n\n\n\n-- 15.通过ALTER TABLE语句修改数据表结构 (因为商品名字现在改为字符型，但是主表中仍然为varchar)\n\n   ALTER TABLE tdb_goods  \n\n   CHANGE goods_cate cate_id SMALLINT UNSIGNED NOT NULL,\n\n   CHANGE brand_name brand_id SMALLINT UNSIGNED NOT NULL;\n  \n-- 16.分别在tdb_goods_cates和tdb_goods_brands表插入记录\n\n   INSERT tdb_goods_cates(cate_name) VALUES('路由器'),('交换机'),('网卡');\n\n   INSERT tdb_goods_brands(brand_name) VALUES('海尔'),('清华同方'),('神舟');\n\n-- 17.在tdb_goods数据表写入任意记录\n\n   INSERT tdb_goods(goods_name,cate_id,brand_id,goods_price) VALUES(' LaserJet Pro P1606dn 黑白激光打印机','12','4','1849');\n\n-- 18.查询所有商品的详细信息(通过内连接实现) 多表连接\n\n   SELECT goods_id,goods_name,cate_name,brand_name,goods_price FROM tdb_goods AS g\n\n   INNER JOIN tdb_goods_cates AS c ON g.cate_id = c.cate_id\n\n   INNER JOIN tdb_goods_brands AS b ON g.brand_id = b.brand_id\\G;\n\n-- 19.查询所有商品的详细信息(通过左外连接实现)\n\n   SELECT goods_id,goods_name,cate_name,brand_name,goods_price FROM tdb_goods AS g\n\n   LEFT JOIN tdb_goods_cates AS c ON g.cate_id = c.cate_id\n\n   LEFT JOIN tdb_goods_brands AS b ON g.brand_id = b.brand_id\\G;\n\n-- 20.查询所有商品的详细信息(通过右外连接实现)\n\n   SELECT goods_id,goods_name,cate_name,brand_name,goods_price FROM tdb_goods AS g\n\n   RIGHT JOIN tdb_goods_cates AS c ON g.cate_id = c.cate_id\n\n   RIGHT JOIN tdb_goods_brands AS b ON g.brand_id = b.brand_id\\G;\n\n-- 21.无限分类的数据表设计\n\n   CREATE TABLE tdb_goods_types(\n     type_id   SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,\n     type_name VARCHAR(20) NOT NULL,\n     parent_id SMALLINT UNSIGNED NOT NULL DEFAULT 0\n  ); \n\n  INSERT tdb_goods_types(type_name,parent_id) VALUES('家用电器',DEFAULT);\n  INSERT tdb_goods_types(type_name,parent_id) VALUES('电脑、办公',DEFAULT);\n  INSERT tdb_goods_types(type_name,parent_id) VALUES('大家电',1);\n  INSERT tdb_goods_types(type_name,parent_id) VALUES('生活电器',1);\n  INSERT tdb_goods_types(type_name,parent_id) VALUES('平板电视',3);\n  INSERT tdb_goods_types(type_name,parent_id) VALUES('空调',3);\n  INSERT tdb_goods_types(type_name,parent_id) VALUES('电风扇',4);\n  INSERT tdb_goods_types(type_name,parent_id) VALUES('饮水机',4);\n  INSERT tdb_goods_types(type_name,parent_id) VALUES('电脑整机',2);\n  INSERT tdb_goods_types(type_name,parent_id) VALUES('电脑配件',2);\n  INSERT tdb_goods_types(type_name,parent_id) VALUES('笔记本',9);\n  INSERT tdb_goods_types(type_name,parent_id) VALUES('超级本',9);\n  INSERT tdb_goods_types(type_name,parent_id) VALUES('游戏本',9);\n  INSERT tdb_goods_types(type_name,parent_id) VALUES('CPU',10);\n  INSERT tdb_goods_types(type_name,parent_id) VALUES('主机',10);\n\n-- 22.查找所有分类及其父类\n\n  SELECT s.type_id,s.type_name,p.type_name FROM tdb_goods_types AS s LEFT JOIN tdb_goods_types AS  p ON s.parent_id = p.type_id;\n   \n-- 23.查找所有分类及其子类\n\n  SELECT p.type_id,p.type_name,s.type_name FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS  s ON s.parent_id = p.type_id;\n\n-- 24.查找所有分类及其子类的数目\n\n  SELECT p.type_id,p.type_name,count(s.type_name) AS children_count FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS s ON s.parent_id = p.type_id GROUP BY p.type_name ORDER BY p.type_id;\n\n-- 25.为tdb_goods_types添加child_count字段\n\n  ALTER TABLE tdb_goods_types ADD child_count MEDIUMINT UNSIGNED NOT NULL DEFAULT 0;\n\n-- 26.将刚才查询到的子类数量更新到tdb_goods_types数据表\n\n  UPDATE tdb_goods_types AS t1 INNER JOIN ( SELECT p.type_id,p.type_name,count(s.type_name) AS children_count FROM tdb_goods_types AS p \n\n                                            LEFT JOIN tdb_goods_types AS s ON s.parent_id = p.type_id \n                             \n                                            GROUP BY p.type_name \n\n                                            ORDER BY p.type_id ) AS t2 \n\n  ON  t1.type_id = t2.type_id \n\n  SET t1.child_count = t2.children_count;\n\n\n-- 27.复制编号为12,20的两条记录\n\n  SELECT * FROM tdb_goods WHERE goods_id IN (19,20);\n\n\n-- 28.INSERT ... SELECT实现复制\n\n  INSERT tdb_goods(goods_name,cate_id,brand_id) SELECT goods_name,cate_id,brand_id FROM tdb_goods WHERE goods_id IN (19,20);\n\n-- 29.查找重复记录\n\n  SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) >= 2;\n\n-- 30.删除重复记录\n\n  DELETE t1 FROM tdb_goods AS t1 LEFT JOIN (SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) >= 2 ) AS t2  ON t1.goods_name = t2.goods_name  WHERE t1.goods_id > t2.goods_id\n")])])])}],!1,null,null,null);s.options.__file="MySQL从入门到放弃.md";t.default=s.exports}}]);