(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{259:function(e,s,t){"use strict";t.r(s);var a=t(0),r=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("div",{staticClass:"content"},[t("blockquote",[t("p",[e._v("最近在搞一个库，需要babel转移，就顺便把babel文档和相关资料撸了一下")])]),e._v(" "),t("h3",{attrs:{id:"babel是啥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel是啥","aria-hidden":"true"}},[e._v("#")]),e._v(" babel是啥")]),e._v(" "),t("p",[e._v("Babel 是一个工具链，主要用于将 ECMAScript 2015+ 版本的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中")]),e._v(" "),t("h3",{attrs:{id:"babel作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel作用","aria-hidden":"true"}},[e._v("#")]),e._v(" babel作用")]),e._v(" "),t("ul",[t("li",[e._v("语法转换")]),e._v(" "),t("li",[e._v("通过 Polyfill 方式在目标环境中添加缺失的特性 (通过 @babel/polyfill 模块)")]),e._v(" "),t("li",[e._v("源码转换 (codemods)")]),e._v(" "),t("li",[e._v("more")])]),e._v(" "),t("h3",{attrs:{id:"presets"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#presets","aria-hidden":"true"}},[e._v("#")]),e._v(" Presets")]),e._v(" "),t("p",[e._v("不想手动一个个安装插件，babel有提供一些插件组合")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@babel/preset-env\n@babel/preset-flow\n@babel/preset-react\n@babel/preset-typescript\n")])])]),t("h3",{attrs:{id:"plugins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugins","aria-hidden":"true"}},[e._v("#")]),e._v(" plugins")]),e._v(" "),t("p",[e._v("babel的一大特点是插件化：使用现有的或者自己编写的插件可以组成一个转换管道。通过使用或创建一个 preset 即可轻松使用一组插件。")]),e._v(" "),t("h3",{attrs:{id:"babel设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel设置","aria-hidden":"true"}},[e._v("#")]),e._v(" babel设置")]),e._v(" "),t("p",[e._v("可用四种方式")]),e._v(" "),t("ul",[t("li",[e._v(".babelrc")]),e._v(" "),t("li",[e._v(".babelrc.js")]),e._v(" "),t("li",[e._v("babel.config.js")]),e._v(" "),t("li",[e._v("package.json中的babel字段")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "presets": [...],\n  "plugins": [...]\n}\n')])])]),t("h3",{attrs:{id:"babel-preset-env"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-preset-env","aria-hidden":"true"}},[e._v("#")]),e._v(" @babel/preset-env")]),e._v(" "),t("p",[e._v("babel推荐使用 "),t("strong",[e._v("@babel/preset-env")]),e._v("套件来处理编译需求，包含了各种可能用到的转译工具。"),t("strong",[e._v("之前的以年份为准的 preset 已经废弃了(babel-preset-2015)，现在统一用这个总包")]),e._v("。")]),e._v(" "),t("h4",{attrs:{id:"targets-browserslist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#targets-browserslist","aria-hidden":"true"}},[e._v("#")]),e._v(" targets browserslist")]),e._v(" "),t("p",[e._v("@babel/preset-env的target可以指定目标浏览器环境来处理哪些feature需要转义，哪些不需要。\ntargets使用browserslist类筛选浏览器环境。当然你也可以配置在package.json browerslist字段， 或者单独配置 .browserslistrc")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "presets": [\n    [\n      "@babel/preset-env",\n      {\n        "targets": {\n            "targets": {\n                "chrome": "58",\n                "ie": "11"\n            }\n        }\n      }\n    ]\n  ],\n}\n\n')])])]),t("h4",{attrs:{id:"browserslist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#browserslist","aria-hidden":"true"}},[e._v("#")]),e._v(" browserslist")]),e._v(" "),t("p",[e._v("browserslist配置能够分享目标浏览器和nodejs版本在不同的前端工具。这些工具能根据目标浏览器自动来进行配置")]),e._v(" "),t("p",[t("strong",[e._v("设置途径")])]),e._v(" "),t("ul",[t("li",[e._v("package.json browerslist字段")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "browserslist": [\n    "last 1 version",\n    "> 1%",\n    "maintained node versions",\n    "not dead"\n  ]\n}\n')])])]),t("ul",[t("li",[e._v(".browserslistrc")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# Browsers that we support \n \nlast 1 version\n> 1%\nmaintained node versions\nnot dead\n")])])]),t("p",[t("strong",[e._v("作用范围")]),e._v("\n(browerlist)[https://github.com/browserslist/browserslist-example]")]),e._v(" "),t("ul",[t("li",[e._v("developers")]),e._v(" "),t("li",[e._v("Autoprefixer")]),e._v(" "),t("li",[e._v("Babel")]),e._v(" "),t("li",[e._v("postcss-preset-env")]),e._v(" "),t("li",[e._v("postcss-normalize")]),e._v(" "),t("li",[e._v("ESLint")]),e._v(" "),t("li",[e._v("Stylelint")])]),e._v(" "),t("h4",{attrs:{id:"usebuiltins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usebuiltins","aria-hidden":"true"}},[e._v("#")]),e._v(" useBuiltIns")]),e._v(" "),t("p",[e._v("这个属性决定是否引入 polyfill,有三个属性")]),e._v(" "),t("ul",[t("li",[e._v("false 不引入")]),e._v(" "),t("li",[e._v("usage 按需引入")]),e._v(" "),t("li",[e._v("entry 全部引入")])]),e._v(" "),t("p",[e._v("后面会根据@babel/polyfill具体阐述")]),e._v(" "),t("h3",{attrs:{id:"core-js2-与core-js3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#core-js2-与core-js3","aria-hidden":"true"}},[e._v("#")]),e._v(" core-js2 与core-js3")]),e._v(" "),t("p",[e._v("core-js 2 封版于 一年半之前，所以里面只有对 一年半之前 feature 的 polyfill，最近 1.5 年新增的 feature 都不支持，也就存在因为新功能没有 polyfill 于是在旧浏览器里失败的风险。")]),e._v(" "),t("p",[e._v("所以我们应当升级到最新版，"),t("strong",[e._v("npm i core-js@3 -D")]),e._v(" 然后修改 babel 配置：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "presets": [\n    [\n      "@babel/preset-env",\n      {\n        "useBuiltIns": "usage",\n        "corejs": 3\n      }\n    ]\n  ],\n}\n')])])]),t("p",[t("strong",[e._v("注意")]),e._v("：目前 Vue Cli 3 集成了 core-js 2，不支持升级到 v3，无法手动升级。需要等待 Vue Cli 4")]),e._v(" "),t("h3",{attrs:{id:"babel-runtime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-runtime","aria-hidden":"true"}},[e._v("#")]),e._v(" @babel/runtime")]),e._v(" "),t("blockquote",[t("p",[e._v("假如我们开发的类库给别人用，我们自己有引用polyfill 的promise，而使用方本地也有封装primise，就会爆炸")])]),e._v(" "),t("ul",[t("li",[e._v("开发类库 （生成不污染全局空间和内置对象原型的代码）")]),e._v(" "),t("li",[e._v("借助 @babel/runtime 中帮助函数（helper function）移除冗余工具函数")])]),e._v(" "),t("h3",{attrs:{id:"polyfill"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#polyfill","aria-hidden":"true"}},[e._v("#")]),e._v(" polyfill")]),e._v(" "),t("p",[e._v("babel会转换新的语法，但是不会转换新的API和static methods，像 promise Array.from等这些需要我们用polyfill垫片来处理")]),e._v(" "),t("blockquote",[t("p",[e._v("Babel includes a polyfill that includes a custom regenerator runtime and core-js")])]),e._v(" "),t("p",[e._v("整个polyfill非常庞大的，我们不可能全部引入，这就需要配合useBuiltIns来处理。配合引入垫片polyfill的方式根据useBuiltIns的不同可以分为三种，即 entry, usage 和 false。（defaults to false）")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("在入口文件中手动 import '@babel/polyfill'\n这种方法会引入全部的polyfill，导致我们的打包文件非常大")])]),e._v(" "),t("li",[t("p",[e._v("useBuiltIns: 'usage' 这时候需要注意 "),t("strong",[e._v("把入口文件的手动import去掉")])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" When setting `useBuiltIns: 'usage'`, polyfills are automatically imported when needed.\n  Please remove the direct import of `core-js` or use `useBuiltIns: 'entry'` instead.\n")])])]),t("p",[e._v("这时 会根据我们的 "),t("strong",[e._v("targets")]),e._v(" 或 "),t("strong",[e._v("browserslist")]),e._v(" 配置来转换，而且或  会 "),t("strong",[e._v("自动检测代码中用到的功能")]),e._v("自动引入模块假如目标文件不支持需要的feature，那么就引入polyfill")]),e._v(" "),t("ul",[t("li",[e._v("babel7.4之后")])]),e._v(" "),t("p",[e._v("@babel/polyfill 是对 core-js 的封装，引用了 core-js的内容和生成器（regenerator-runtime)。 v7.4 之后，这个仓库就被废弃了，希望用户自己选择使用哪个兼容库。\n"),t("strong",[e._v("之前")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import \"@babel/polyfill\" or useBuildtIns:'usage'\n")])])]),t("p",[t("strong",[e._v("之后")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import "core-js/stable";\nimport "regenerator-runtime/runtime"; //会在我们安装 @babel/runtime 时自动安装\n')])])]),t("p",[e._v("但是测试中结合useBuildIns 并未实现按需加载")]),e._v(" "),t("p",[e._v("总结： 目前我认为最好的选择还是 "),t("strong",[e._v("useBuiltIns: 'usage'")]),e._v(" 入口文件不需要手动引入")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "presets": [\n    [\n      "@babel/preset-env",\n      {\n        "useBuiltIns": "usage",\n        "corejs": 3\n      }\n    ]\n  ],\n    "plugins": ["@babel/plugin-transform-runtime"]\n}\n')])])]),t("p",[e._v("(1)[https://juejin.im/post/5d0373a95188251e1b5ebb6c]\n(2)[https://blog.meathill.com/js/some-tips-of-babel-preset-env-config.html]")])])}],!1,null,null,null);r.options.__file="babel polyfill runtime了解一下.md";s.default=r.exports}}]);